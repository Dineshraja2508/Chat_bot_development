<?xml version="1.0"?>
<add>
<doc>
 <field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/introduction/introduction#introduction</field><field name="content">
 introduction denodo virtual dataport global solution integrate heterogeneous distribute datum source
 virtual dataport datum relevant company regardless origin format level structure
 incorporate datum data system real time configurable preload facilitate construction service high strategic functional value corporate business use
 virtual dataport base client server architecture client issue statement server write vql virtual query language sql like language query define datum view virtual dataport administration guide virtual dataport vql guide
 document introduce product user mechanism available client application use denodo virtual dataport data integration facility
 client application access virtual dataport way jdbc interface java database connectivity
 virtual dataport provide jdbc driver client application use purpose section access jdbc
 odbc interface open database connectivity
 virtual dataport provide odbc interface odbc driver odbc client section access odbc
 ado.net data provider section access ado.net datum provider
 soap rest web service interface access generic restful web service interface
 service automatically deploy http://localhost:9090 denodo restfulws
 virtual dataport administration tool publish soap rest web service publish "content" view
 section publication web service administration guide
 introduction
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/introduction/examples/examples#examples</field><field name="content">
 example 
  denodo_home /samples vdp/ directory example client retrieve datum virtual dataport vdp client contain sample program connect virtual dataport jdbc interface soap web service
 vdp-clients-ado.net contain c program ado.net data provider connect directly odbc interface virtual dataport window odbc dsn
 execute query
 vdp client c++ contain c++ program connect virtual dataport odbc interface execute query
 vdp client entityframework contain c program send query virtual dataport entity framework example readme file directory
 example
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/access_through_jdbc#access-through-jdbc</field><field name="content">
 access jdbc jdbc java database connectivity java api allow execute statement relational database regardless database management system
 denodo provide jdbc type 4 driver implement main characteristic jdbc 4.1 api java database connectivity
 mean driver platform independent
 denodo jdbc driver denodo community https://community.denodo.com/drivers/jdbc/
 download version update instal denodo server
 find version denodo server connect log server design studio administration tool click menu file  look vdp server instal update
 need register site download register
 installation denodo platform  denodo_home /tools client driver jdbc vdp jdbcdriver core denodo vdp jdbcdriver.jar
 java version jdbc driver compatible java 8 9 10 11
 driver class class driver com.denodo.vdp.jdbc
 driver connection url syntax database url syntax jdbc connection url jdbc denodo:// hostname : port / databasename [? paramname = paramvalue 
  paramname = paramvalue  important use prefix jdbc denodo need use denodo jdbc driver 8.0u20210209 new
 use driver 8.0 ga use prefix jdbc vdb
 backward compatibility new driver support prefix jdbc vdb
 database mandatory
 example jdbc connection url sample jdbc denodo://denodo server.acme.com:9999 admin?ssl = true querytimeout=100000 chunktimeout=1000 useragent = myapplication autocommit = true
 database contain non ascii character url encode
 example database \u30c6\u30b9\u30c8 connection url database jdbc connection url sample non ascii character jdbc denodo://localhost:9999/%e3%83%86%e3%82%b9%e3%83%88?querytimeout=900000 chunktimeout=1000 useragent = myapplication autocommit = true path  denodo_home /samples vdp vdp client contain example client program access virtual dataport jdbc readme file path explain generate publish view access client example
 backward compatibility virtual dataport backward compatible jdbc driver client major version
 connect virtual dataport run certain update use jdbc driver update old update
 example connect denodo server version 8.0 update 20210715 use jdbc driver include update old update
 use jdbc driver 8.0 20210715 connect virtual dataport 8.0 update 20210209 old driver recent server
 unsupported configuration operation fail
 jdbc driver denodo 8.0 ga 8.0 update return error try connect denodo 7.0 old
 feature driver feature jdbc specification support virtual dataport jdbc driver datum type support define vql guide include support basic type field type array register
 execution statement query insert update delete datum
 addition create new element datum source view etc support metadata description statement list server catalog element
 support preparedstatement
 support cancel current statement execution cancel method java.sql
 statement class
 query cancel virtual dataport server cancel current access datum source cache
 invoke cancel method possible server return result retrieve source access cancel effective
 query cancellation imply close resultset
 invocation store procedure statement
 support submit batch command
 resultset object return virtual dataport updatable i.e. concur_read_only cursor forward i.e. type_forward_only
 addition resultset object close current transaction commit i.e. close_cursors_at_commit
 driver implement method resultset getgeneratedkey class java.sql
 statement auto generate key idu statement
 support jdbc escape syntax timestamp date time literal query datetime literal
 access jdbc
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/access_through_jdbc#id1</field><field name="content">
 syntax jdbc connection url jdbc denodo:// hostname : port / databasename [? paramname = paramvalue paramname = paramvalue 
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/access_through_jdbc#id2</field><field name="content">
 jdbc connection url sample jdbc denodo://denodo server.acme.com:9999 admin?ssl = true querytimeout=100000 chunktimeout=1000 useragent = myapplication autocommit = true
 id2
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/access_through_jdbc#id3</field><field name="content">
 jdbc connection url sample non ascii character jdbc denodo://localhost:9999/%e3%83%86%e3%82%b9%e3%83%88?querytimeout=900000 chunktimeout=1000 useragent = myapplication autocommit = true
 id3
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/parameters_of_the_jdbc_connection_url/parameters_of_the_jdbc_connection_url#jdbc-driver-parameters</field><field name="content">
 jdbc driver parameter table list parameter jdbc driver default value
 indicate option parameter connection url driver property usergsscredential pass driver property url parameter
 parameter jdbc driver default value parameter url description adjustscaleofdecimalvalue true driver modify value type decimal  resultset  scale match scale report metadata resultset
 set true connect apache arrow
 default value false
 autocommit true invocation method jdbc api responsible manage transaction ignore
 i.e. driver ignore invocation method setautocommit commit rollback
 useful sure application start transaction inadvertently
 parameter set true application start finish transaction execute statement begin commit rollback
 client invoke setautocommit(false execute commit driver start new transaction execute statement
 client invoke setautocommit(false account limit duration transaction default transaction 30 minute
 execution statement finish client execute statement 30 second
 limit duration transaction section transaction virtual dataport vql guide
 default value true
 chunksize result query divide block chunk server wait query finish order begin send result client
 parameter establish maximum number result block contain
 server obtain result complete block send block driver continue process result
 application use driver add parameter connection url and/or execute query invoke method setfetchsize class statement
 value set setfetchsize method override value set url
 default value 1000 chunktimeout
 parameter establish maximum time millisecond server wait return new block driver
 time exceed server send current block driver contain number result specify chunksize parameter
 note chunksize chunktimeout 0 server return result single block
 value different 0 server return chunk condition happen chunk fill chunksize
 certain time send chunk client chunktimeout default value 90000 millisecond 90 second connecttimeout parameter establish maximum time millisecond driver wait open connection
 time exceed timeout error return
 note connecttimeout equal low 0 timeout disabled limit apply
 default value 120000 millisecond 120 second describenationalchartypesasbasictype true driver report field type nchar nvarchar nclob longnvarchar char varchar clob longvarchar respectively
 default value false i18n
 parameter establish internationalization i18n configuration connection server
 present driver assume i18n database connect
 parameter i18n context clause query override value parameter
 default value i18n database connect identifiersuppercase true execute select query field return uppercase
 default value false idlekeepalive indicate connection send alive idle state number second specify keepalive property
 default value false keepalive indicate number second connection currently discard alive response receive server
 value equal low 0 disable functionality
 default value 300 loggerconsole true driver print log message console enable jdbc logging
 default value false loggerfile driver write log message file enable jdbc logging
 default value n loggerlevel level log message
 level follow java log syntax
 mandatory enable log enable jdbc logging
 value severe warning info fine finer fine
 default value n loggernativecall true driver log information relate internal communication
 default value false nativecompress true datum compress network level
 default value false password password authenticate virtual dataport
 parameter provide value parameter user
 default value n publishcatalogsasschema default jdbc driver expose database virtual dataport catalog catalog collection sql object table view store procedure etc
 property true driver expose database schema schema collection sql object
 tool expect database organize element schema catalog
 case add parameter connection value true
 default value false publishviewsastable false metadata publish jdbc driver describe base view table element derive interface view view element
 true metadata describe view table element
 party tool require jdbc metadata publish view table order recognize association create view
 application add parameter url value true
 default value false querytimeout maximum time millisecond driver wait query finish
 period throw exception
 parameter optional
 set query timeout default value 900000 millisecond
 0 driver wait indefinitely query finish
 parameter set default timeout query
 addition change timeout single query add parameter querytimeout =  value  context clause query
 section context clause vql guide
 default value 900000 millisecond 15 minute pingquery pingquerytimeout parameter need connect virtual dataport load balancer
 section connect virtual dataport load balancer explain use
 default value sendsniheader true ssl connection virtual dataport add server indication sni header set server_name value open connection
 default value true ssl default driver try establish non ssl connection server
 ssl enable server connection fail immediately driver try establish ssl connection
 true driver establishe ssl connection
 ssl disabled server connection fail
 recommend value server use ssl
 false driver establish non ssl connection try establish ssl connection
 ssl enable server connection fail
 default value ssltrustservercertificate true driver validate ssl certificate present virtual dataport connect
 parameter easy use self sign certificate certificate sign organization use internally
 consider validate certificate consider security risk
 false driver validate ssl certificate present virtual dataport
 driver property account property ssl true
 default value false ssltruststorelocation ssltruststorepassword ssltruststorelocation path trust store file contain ssl certificate driver trust
 ssltruststorepassword password trust store
 parameter optional
 provide driver use password validate integrity trust store
 prevent unauthorized user add certificate trust store
 ssltruststorelocation set driver use trust store i.e. cacert file java virtual machine launch application use driver
 driver property account property ssl true
 default value user user authenticate virtual dataport
 parameter provide value parameter password
 default value n useragent set user agent connection
 section set user agent application administration guide explain recommend set parameter
 default value 
 usergsscredential java object class org.ietf.jgss
 gsscredential
 use driver property pass kerbero credential driver use connect denodo usergsscredential driver property pass parameter url property section connect virtual dataport kerbero authentication
 default value
 wanoptimize true driver enable feature reduce latency communication client application virtual dataport server
 default value false property relate oauth authentication explain page connect virtual dataport oauth authentication
 autocommit property default connection open denodo jdbc driver property autocommit set true
 recommend value effect query perform inside transaction
 change property false need statement execute inside transaction
 reason virtual dataport use distribute transaction manager use 2 phase commit protocol
 protocol introduce overhead query
 set property false need query run unnecessarily slow  
 connect virtual dataport ssl tls ssl enable virtual dataport ssl certificate use sign public certification authority connection fail client application configure trust certification authority sign key
 trust authority need import certificate authority cacert file java runtime environment jre client application use
 jdbc driver parameter
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/parameters_of_the_jdbc_connection_url/parameters_of_the_jdbc_connection_url#parameters-of-the-jdbc-driver-and-their-default-value</field><field name="content">
  
 parameter jdbc driver default value
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_through_a_load_balancer/connecting_to_virtual_dataport_through_a_load_balancer#connecting-to-virtual-dataport-through-a-load-balancer</field><field name="content">
 connect virtual dataport load balancer read section jdbc client connect virtual dataport load balancer intermediate resource hold pool connection virtual dataport
 table parameter jdbc driver useful set cluster denodo server list parameter url useful connect virtual dataport load balancer parameter jdbc driver useful set cluster denodo server parameter url description pingquery pingquerytimeout important use property load balancer client application execute ping query support set timeout ping query
 client execute query parameter pingquery driver return error query finish number millisecond set pingquerytimeout detailed explanation property
 default value parameter sample url jdbc application parameter pingquery pingquerytimeout jdbc denodo://acme:9999 admin?pingquery = select 1 pingquerytimeout=1000 url driver return error client application load balancer execute query select 1 virtual dataport return response second
 error cause client load balancer create new connection instead reuse
 need add parameter pingquery pingquerytimeout connection url load balancer client meet condition execute ping query check virtual dataport server alive connection valid
 client application load balancer support execute ping query support set timeout query
 runtime jdbc driver receive query set parameter pingquery wait maximum pingquerytimeout millisecond query finish
 query finish time driver return error indicate client load balancer connection long valid
 connection virtual dataport server invalid time drop firewall
 note driver actually execute ping query
 client application load balancer
 connect virtual dataport load balancer
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_through_a_load_balancer/connecting_to_virtual_dataport_through_a_load_balancer#parameters-of-the-jdbc-driver-useful-to-set-up-a-cluster-of-denodo-servers</field><field name="content">
  
 parameter jdbc driver useful set cluster denodo server
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_through_a_load_balancer/connecting_to_virtual_dataport_through_a_load_balancer#id1</field><field name="content">
 sample url jdbc application parameter pingquery pingquerytimeout jdbc denodo://acme:9999 admin?pingquery = select 1 pingquerytimeout=1000
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_kerberos_authentication/connecting_to_virtual_dataport_using_kerberos_authentication#connecting-to-virtual-dataport-using-kerberos-authentication</field><field name="content">
 connect virtual dataport kerberos authentication 
 denodo jdbc driver support kerbero authentication protocol
 use need add certain property connection
 virtual dataport server configure use kerbero authentication client use standard authentication
 table list driver property set create jdbc connection  
 kerbero authentication user password
 easy option set
 option driver request ticket grant ticket tgt active directory send server
 valid standalone application use credential connect denodo
 driver property user password authentication kerbero property value usekerberos true debug true remove property issue kerbero authentication user password user password user
 jdbc client dbvisualizer enter credential user  password box instead provide property  
 kerbero constrain delegation denodo driver support kerbero constrain delegation
 allow denodo server obtain service ticket restrict list service client present service ticket
 driver property pass kerbero credential object property value usekerberos true usergsscredential java object class org.ietf.jgss
 gsscredential driver property usergsscredential pass gsscredential object
 follow sample code gsscredential usercredential = driver driver = driver class.forname(\com.denodo.vdp.jdbc.driver\).newinstance property property = new property properties.put(\usergsscredential usercredential connection conn = driver.connect(\jdbc denodo://denodo1.acme.com:9999 customer?useragent = myapplication property single sign option client application provide credential
 driver automatically obtain kerbero credential user launch application use connect denodo
 user enter credential
 client application run window consider add follow library classpath application addition denodo driver  denodo_home /lib contrib jna.jar  denodo_home /lib contrib jna platform.jar example db visualizer driver manager load jar file driver jar
 driver property obtain kerbero credential ticket cache system window single sign sso property value usekerberos true debug true remove property issue kerbero authentication useticketcache true renewtgt true kerbero credential store ticket cache option driver obtain kerbero credential kerberos credential cache
 driver property obtain kerbero credential ticket cache file property value usekerberos true debug true remove property issue kerbero authentication useticketcache true renewtgt true ticketcache path ticket cache file authentication mode need generate ticket cache file host jdbc application run
 manually obtain cache file ticket grant ticket tgt
 open command line execute follow  denodo_home \\jre\\bin\\kinit.exe -f -c  denodo_home \\conf\\vdp admin\\ticket\\cache option -f request key distribution center kdc return forwardable ticket
 client application belong domain application want connect denodo kerbero authentication need information active directory domain
 client application run host active directory domain usually application obtain information environment
 client domain need provide information
 need obtain krb5.conf/ini file
 connect virtual dataport kerbero authentication
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_kerberos_authentication/connecting_to_virtual_dataport_using_kerberos_authentication#id1</field><field name="content">
  
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_kerberos_authentication/connecting_to_virtual_dataport_using_kerberos_authentication#id2</field><field name="content">
  
 id2
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_kerberos_authentication/connecting_to_virtual_dataport_using_kerberos_authentication#id3</field><field name="content">
  
 id3
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_kerberos_authentication/connecting_to_virtual_dataport_using_kerberos_authentication#id4</field><field name="content">
  
 id4
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_kerberos_authentication/connecting_to_virtual_dataport_using_kerberos_authentication#when-the-client-application-does-not-belong-to-the-domain</field><field name="content">
 client application belong domain application want connect denodo kerbero authentication need information active directory domain
 client application run host active directory domain usually application obtain information environment
 client domain need provide information
 need obtain krb5.conf/ini file
 client application belong domain
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_oauth_authentication/connecting_to_virtual_dataport_using_oauth_authentication#connecting-to-virtual-dataport-using-oauth-authentication</field><field name="content">
 connect virtual dataport oauth authentication denodo jdbc driver support oauth 2.0 protocol authentication authorization user
 oauth open standard protocol allow client application access denodo send password user account
 oauth connect virtual dataport enable oauth virtual dataport
 connection oauth fail
 denodo provide path connect denodo oauth
 depend choose add certain parameter
 indicate parameter parameter connection url driver property
 path 1 oauth 2.0 authentication provide access token client application obtain oauth access token pass denodo jdbc driver
 driver use token connect virtual dataport
 path mean client application ability obtain access token connect virtual dataport
 client application obtain access token behalf end user application
 method add follow parameter connection url driver property parameter oauth 2.0 authentication access token property value useoauth2 true accesstoken oauth 2.0 access token provide user password
 path 2 oauth 2.0 resource owner password credential client application ability obtain oauth token driver obtain behalf application identity provider organization support resource owner password credential oauth flow
 case configure connection information identity provider
 url request token identity provider client d client secret application register identity provider etc client application open connection driver request oauth token identity provider use token establish connection
 method add follow url parameter connection url parameter oauth 2.0 authentication resource owner password credential property value useoauth2 true user
 username provide client obtain access token password password correspond user authenticate tokenendpoint url expose oauth server request access token clientid application client d.
 usually obtain register client application identity provider clientsecret application client secret scope string value different scope request extraparam additional parameter add body http request driver send obtain oauth token
 syntax parameter param1 = value1 param2 = value2 indicate driver property parameter connection url
 useidtoken true driver use id_token authentication
 false use access_token
 set true environment openid connect
 default value false oauthsslverify true driver validate ssl certificate identity provider
 false validate certificate
 default value true
 connect virtual dataport oauth authentication
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_oauth_authentication/connecting_to_virtual_dataport_using_oauth_authentication#id1</field><field name="content">
  
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/connecting_to_virtual_dataport_using_oauth_authentication/connecting_to_virtual_dataport_using_oauth_authentication#id2</field><field name="content">
  
 id2
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#details-of-the-jdbc-interface</field><field name="content">
 detail jdbc interface section describe information specific jdbc driver denodo description view field retrieve "content" type blob value work datetime value denodo jdbc driver set datetime value parameter prepared statement driver report datetime interval type obtain element inside struct register
 connect application filter incoming serialization datum query datetime literal auto generate key idu statement description view field driver publish description view field column remark metadata table view field
 retrieve "content" type blob value 
 driver available "content" type blob field
 example
 retrieve "content" type blob value resultset rs = stmt.executequery com.denodo.vdb.jdbcdriver
 vdbjdbcblob blob = com.denodo.vdb.jdbcdriver
 vdbjdbcblob rs.getblob(index string "content"type = blob.get"content"type
 work datetime value denodo jdbc driver follow subsection provide information use jdbc driver work different datetime value
 set datetime value parameter prepared statement driver report datetime interval type
 set datetime value parameter prepared statement table list method class preparedstatement invoke set value parameter depend type value
 method set datetime parameter preparedstatement type method(s set parameter type preparedstatement localdate preparedstatement.setobject(java.time.localdate preparedstatement.setdate(java.sql
 date
 example create localdate object setobject(1 java.time.localdate.of(2018,01,15 create date object setdate(1 java.sql
 date.valueof(\2018 01 15
 accord documentation class java.sql
 date setdate date object normalize set hour minute second millisecond zero particular time zone instance associate
 localdate object simple
 time preparedstatement.setobject(java.time.localtime preparedstatement.settime(java.sql
 time
 example create localtime object setobject(1 localtime.of(11 58 59 123000000 create java.sql
 time object settime(2 java.sql
 time.valueof(\11:58:59 accord documentation class java.sql
 time settime date component time object set zero epoch value january 1 1970
 localtime object simple
 timestamp preparedstatement.setobject(java.time
 localdatetime example setobject(1 java.time.localdatetime.of 2018 01 15 23 58 59 256000000
 parameter represent 256 millisecond value nanosecond
 denodo maximum precision timestamp timestamptz time millisecond nanosecond
 preparedstatement.settimestamp timestamptz value
 query fail query cast timestamptz timestamp order work parameter i18n connection uri match i18n set denodo server
 date deprecate timestamptz timestamptz preparedstatement.setobject(java.time
 offsetdatetime preparedstatement.settimestamp(java.sql
 timestamp
 example create offsetdatetime object setobject(1 offsetdatetime.parse 2018 01 01t21:15:00 + 01:00
 create timestamp object simpledateformat sdf = new simpledateformat(\yyyy mm dd hh mm ss xxx sdf.settimezone(\gmt settimestamp 1 sdf.parse(\1982 12 13 01:59:59 +0000 interval_year_month setobject(java.time.period example equivalent interval 145 11 year month setobject(1 period.ofyears(145).plusmonths(11 equivalent interval 145 year setobject(period.ofyear 145 interval_day_second setobject(java.time
 duration
 example equivalent interval 4 5:12 day minute setobject(duration.ofdays(4).plushours(5).plusminutes(12 equivalent interval 4 5:12:10.222 day second setobject(duration.parse(\p4dt5h12m10.222s driver report datetime interval type 
 table list jdbc driver report datetime type
 type denodo type return method resultsetmetadata.getcolumntypename value return method resultsetmetadata.getcolumntype(int localdate date 91 time time 92 timestamp timestamp 93 date deprecate
 timestamp_with_timezone 2014 timestamptz timestamp_with_timezone 2014 interval_year_month interval_year_month 2020 interval_day_second interval_day_second 2021 type date timestamptz report type timestamp timezone client application distinguish
 intentional facilitate upgrade denodo 8.0 denodo 6.0 previous version
 client application need distinguish type treat timestamptz
 code type interval_year_month interval_day_second define denodo jdbc api  
 type denodo result resultsetmetadata.getcolumnclassname(int java class object return class resultset.getobject localdate java.sql
 date java.sql
 date time java.sql
 time java.sql
 time timestamp java.sql
 timestamp java.sql
 timestamp date deprecate java.sql
 timestamp java.sql
 timestamp timestamptz java.sql
 timestamp java.sql
 timestamp interval_year_month java.lang
 long java.lang
 long invoke java.time
 period.ofmonth value convert value java.time
 period object
 obtain duration object driver invoke resultset.getobject(col java.time.period.class
 interval_day_second java.lang
 long java.lang
 long invoke java.time
 duration
 ofmillis(value convert value java.time
 duration object
 obtain duration object driver invoke resultset.getobject(col java.time.duration.class
 obtain element inside struct register jdbc driver denodo transform compound value class jdbc api convert value type register java.sql
 struct object
 convert value type array java.sql
 array object
 java.sql
 array object array struct object
 standard jdbc api provide method obtain value inside java.sql
 struct object i.e. inside register field
 offer way obtain subfield struct obtain value subfield
 section explain denodo jdbc driver obtain subfield struct object
 obtain value subfield instead position inside register
 example let application execute query return register field subfield last_name first_name
 row result set return struct object
 obtain value struct object application invoke method struct.getattribute return array value
 later modify register add subfield e.g. telephone array return method struct.getattribute element instead
 addition element array telephone application obtain invalid datum
 avoid sort maintainability issue want use class denodo jdbc api obtain value struct position register
 application robust change
 example
 obtain value inside struct object import com.denodo.vdb.jdbcdriver.printer
 field import com.denodo.vdb.jdbcdriver
 vdbjdbcresultsetmetadata import com.denodo.vdb.vdbinterface.common.clientresult.vo.descriptions.type
 registervo import com.denodo.vdb.vdbinterface.common.clientresult.vo.descriptions.type
 registervaluevo public static void main(string args throw exception
 
 method getconnection return connection virtual dataport connection connection = getconnection statement st = connection.createstatement string query = select view_with_compound_field resultset rs = st.executequery(query
 
 class vdbjdbcresultsetmetadata field denodo jdbc api
 belong standard jdbc api
 vdbjdbcresultsetmetadata metadata = vdbjdbcresultsetmetadata rs.getmetadata field field = metadata.getfield rs.next int columncount = metadata.getcolumncount int = 1  = columncount i++ object value = rs.getobject(i value = null metadata.getcolumntype(i
 = = type
 struct
 
 
 jdbc api represent value type register struct object
 
 
 
 class registervo registervaluevo denodo jdbc api
 belong standard java api
 registervo vdptype = registervo fields[i 1].getvdptype
 list  registervaluevo  registersubtype = vdptype.getelement struct struct = struct value object structvalue = struct.getattribute string firstname = null lastname = null int j=0 j  registersubtypes.size j++
 variable registersubtype contain subfield
 string subfieldname = registersubtypes.get(j).getname switch subfieldname case first_name firstname = string structvalues[j break case last_name lastname = string structvalues[j break
 metadata.getcolumntype(i)==types.array
 
 jdbc api represent value type array array object
 object register = object rs.getarray(i).getarray object o register
 denodo jdbc api "content" array array struct object
 
 struct s = struct o
 
 close resultset statement connection
 connect application filter incoming serialization datum denodo jdbc driver use java remote method invocation rmi connect virtual dataport
 client application e.g. late version oracle weblogic server include mechanism filter datum receive rmi
 mechanism increase security client application
 default configuration filter application prevent application receive datum denodo
 connect denodo application filter enable administrator application add follow parameter control filter com.denodo
 configuration filter depend client application
 find information official specification jep 290
 filter incoming serialization datum query datetime literal escape processing enable jdbc statement denodo jdbc driver interpret jdbc escape syntax timestamp date time literal equivalent correct vql syntax timestamp
 follow syntax timestamp literal ts yyyy mm dd hh mm ss.f follow syntax date literal d yyyy mm dd follow syntax time literal t hh mm ss example query select my_view
 time_field
 = t 20:00:03 date_field = d 1999 01 09 timestamp_field = ts 1999 01 09 20:11:11.123455 process jdbc driver send virtual dataport select my_view
 time_field = time 20:00:03 date_field = date 1999 01 09 timestamp_field = timestamp 1999 01 09 20:11:11.123455 auto generate key idu statement jdbc driver support retrieve value underlie database generate insert row
 auto generate value primary key new row
 example retrieve auto generate key denodo jdbc driver statement stmt = conn.createstatement
 statement.return_generated_key code request virtual dataport return auto generate value
 int row = stmt.executeupdate(\insert customer + first_name last_name
 + value john smith statement.return_generated_keys resultset rs = stmt.getgeneratedkey boolean b = rs.next b = = true retrieve new key value long customerid = rs.getlong(1 obtain auto generate key execute idu statement i.e. insert update  delete method boolean execute string sql int autogeneratedkey second argument statement.return_generated_keys boolean execute string sql int columnindexe
 boolean execute string sql string columnname int executeupdate string sql int autogeneratedkey second argument statement.return_generated_keys int executeupdate string sql int columnindexe int executeupdate string sql string columnname long executelargebatch string sql int autogeneratedkey second argument statement.return_generated_key long executelargebatch string sql int columnindexe long executelargebatch string sql string columnname
 use class java.sql
 statement java.sql
 preparedstatement
 virtual dataport store datum support feature depend underlie database support database vendor implement functionality
 example let application connect virtual dataport jdbc driver application execute code like
 datum view customer store oracle oracle return auto generate value virtual dataport driver pass application
 database test behavior check database use return value
 work internally application request return generate key driver modify idu query send virtual dataport application request obtain generate key statement.return_generated_key driver append idu statement return generate key application request auto generate value specific field driver append like idu statement return field_name_2 field_name_4 field_name_5 application request auto generate value specific field index driver append like idu statement return 3 7 11
 detail jdbc interface
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#description-of-views-and-their-fields</field><field name="content">
 description view field driver publish description view field column remark metadata table view field
 description view field
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#retrieving-the-"content"-type-of-blob-values</field><field name="content">
 retrieve "content" type blob value driver available "content" type blob field
 example
 retrieve "content" type blob value resultset rs = stmt.executequery com.denodo.vdb.jdbcdriver
 vdbjdbcblob blob = com.denodo.vdb.jdbcdriver
 vdbjdbcblob rs.getblob(index string "content"type = blob.get"content"type
 retrieve "content" type blob value
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#id2</field><field name="content">
 retrieve "content" type blob value resultset rs = stmt.executequery com.denodo.vdb.jdbcdriver
 vdbjdbcblob blob = com.denodo.vdb.jdbcdriver
 vdbjdbcblob rs.getblob(index string "content"type = blob.get"content"type
 id2
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#working-with-datetime-values-with-the-denodo-jdbc-driver</field><field name="content">
 work datetime value denodo jdbc driver follow subsection provide information use jdbc driver work different datetime value
 set datetime value parameter prepared statement driver report datetime interval type
 set datetime value parameter prepared statement table list method class preparedstatement invoke set value parameter depend type value
 method set datetime parameter preparedstatement type method(s set parameter type preparedstatement localdate preparedstatement.setobject(java.time.localdate preparedstatement.setdate(java.sql
 date
 example create localdate object setobject(1 java.time.localdate.of(2018,01,15 create date object setdate(1 java.sql
 date.valueof(\2018 01 15
 accord documentation class java.sql
 date setdate date object normalize set hour minute second millisecond zero particular time zone instance associate
 localdate object simple
 time preparedstatement.setobject(java.time.localtime preparedstatement.settime(java.sql
 time
 example create localtime object setobject(1 localtime.of(11 58 59 123000000 create java.sql
 time object settime(2 java.sql
 time.valueof(\11:58:59 accord documentation class java.sql
 time settime date component time object set zero epoch value january 1 1970
 localtime object simple
 timestamp preparedstatement.setobject(java.time
 localdatetime example setobject(1 java.time.localdatetime.of 2018 01 15 23 58 59 256000000
 parameter represent 256 millisecond value nanosecond
 denodo maximum precision timestamp timestamptz time millisecond nanosecond
 preparedstatement.settimestamp timestamptz value
 query fail query cast timestamptz timestamp order work parameter i18n connection uri match i18n set denodo server
 date deprecate timestamptz timestamptz preparedstatement.setobject(java.time
 offsetdatetime preparedstatement.settimestamp(java.sql
 timestamp
 example create offsetdatetime object setobject(1 offsetdatetime.parse 2018 01 01t21:15:00 + 01:00
 create timestamp object simpledateformat sdf = new simpledateformat(\yyyy mm dd hh mm ss xxx sdf.settimezone(\gmt settimestamp 1 sdf.parse(\1982 12 13 01:59:59 +0000 interval_year_month setobject(java.time.period example equivalent interval 145 11 year month setobject(1 period.ofyears(145).plusmonths(11 equivalent interval 145 year setobject(period.ofyear 145 interval_day_second setobject(java.time
 duration
 example equivalent interval 4 5:12 day minute setobject(duration.ofdays(4).plushours(5).plusminutes(12 equivalent interval 4 5:12:10.222 day second setobject(duration.parse(\p4dt5h12m10.222s driver report datetime interval type 
 table list jdbc driver report datetime type
 type denodo type return method resultsetmetadata.getcolumntypename value return method resultsetmetadata.getcolumntype(int localdate date 91 time time 92 timestamp timestamp 93 date deprecate
 timestamp_with_timezone 2014 timestamptz timestamp_with_timezone 2014 interval_year_month interval_year_month 2020 interval_day_second interval_day_second 2021 type date timestamptz report type timestamp timezone client application distinguish
 intentional facilitate upgrade denodo 8.0 denodo 6.0 previous version
 client application need distinguish type treat timestamptz
 code type interval_year_month interval_day_second define denodo jdbc api  
 type denodo result resultsetmetadata.getcolumnclassname(int java class object return class resultset.getobject localdate java.sql
 date java.sql
 date time java.sql
 time java.sql
 time timestamp java.sql
 timestamp java.sql
 timestamp date deprecate java.sql
 timestamp java.sql
 timestamp timestamptz java.sql
 timestamp java.sql
 timestamp interval_year_month java.lang
 long java.lang
 long invoke java.time
 period.ofmonth value convert value java.time
 period object
 obtain duration object driver invoke resultset.getobject(col java.time.period.class
 interval_day_second java.lang
 long java.lang
 long invoke java.time
 duration
 ofmillis(value convert value java.time
 duration object
 obtain duration object driver invoke resultset.getobject(col java.time.duration.class
 work datetime value denodo jdbc driver
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#setting-datetime-values-on-parameters-of-prepared-statements</field><field name="content">
 set datetime value parameter prepared statement table list method class preparedstatement invoke set value parameter depend type value
 method set datetime parameter preparedstatement type method(s set parameter type preparedstatement localdate preparedstatement.setobject(java.time.localdate preparedstatement.setdate(java.sql
 date
 example create localdate object setobject(1 java.time.localdate.of(2018,01,15 create date object setdate(1 java.sql
 date.valueof(\2018 01 15
 accord documentation class java.sql
 date setdate date object normalize set hour minute second millisecond zero particular time zone instance associate
 localdate object simple
 time preparedstatement.setobject(java.time.localtime preparedstatement.settime(java.sql
 time
 example create localtime object setobject(1 localtime.of(11 58 59 123000000 create java.sql
 time object settime(2 java.sql
 time.valueof(\11:58:59 accord documentation class java.sql
 time settime date component time object set zero epoch value january 1 1970
 localtime object simple
 timestamp preparedstatement.setobject(java.time
 localdatetime example setobject(1 java.time.localdatetime.of 2018 01 15 23 58 59 256000000
 parameter represent 256 millisecond value nanosecond
 denodo maximum precision timestamp timestamptz time millisecond nanosecond
 preparedstatement.settimestamp timestamptz value
 query fail query cast timestamptz timestamp order work parameter i18n connection uri match i18n set denodo server
 date deprecate timestamptz timestamptz preparedstatement.setobject(java.time
 offsetdatetime preparedstatement.settimestamp(java.sql
 timestamp
 example create offsetdatetime object setobject(1 offsetdatetime.parse 2018 01 01t21:15:00 + 01:00
 create timestamp object simpledateformat sdf = new simpledateformat(\yyyy mm dd hh mm ss xxx sdf.settimezone(\gmt settimestamp 1 sdf.parse(\1982 12 13 01:59:59 +0000 interval_year_month setobject(java.time.period example equivalent interval 145 11 year month setobject(1 period.ofyears(145).plusmonths(11 equivalent interval 145 year setobject(period.ofyear 145 interval_day_second setobject(java.time
 duration
 example equivalent interval 4 5:12 day minute setobject(duration.ofdays(4).plushours(5).plusminutes(12 equivalent interval 4 5:12:10.222 day second setobject(duration.parse(\p4dt5h12m10.222s
 set datetime value parameter prepared statement
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#id3</field><field name="content">
  
 id3
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#how-the-driver-reports-the-datetime-and-interval-types</field><field name="content">
 driver report datetime interval type 
 table list jdbc driver report datetime type
 type denodo type return method resultsetmetadata.getcolumntypename value return method resultsetmetadata.getcolumntype(int localdate date 91 time time 92 timestamp timestamp 93 date deprecate
 timestamp_with_timezone 2014 timestamptz timestamp_with_timezone 2014 interval_year_month interval_year_month 2020 interval_day_second interval_day_second 2021 type date timestamptz report type timestamp timezone client application distinguish
 intentional facilitate upgrade denodo 8.0 denodo 6.0 previous version
 client application need distinguish type treat timestamptz
 code type interval_year_month interval_day_second define denodo jdbc api  
 type denodo result resultsetmetadata.getcolumnclassname(int java class object return class resultset.getobject localdate java.sql
 date java.sql
 date time java.sql
 time java.sql
 time timestamp java.sql
 timestamp java.sql
 timestamp date deprecate java.sql
 timestamp java.sql
 timestamp timestamptz java.sql
 timestamp java.sql
 timestamp interval_year_month java.lang
 long java.lang
 long invoke java.time
 period.ofmonth value convert value java.time
 period object
 obtain duration object driver invoke resultset.getobject(col java.time.period.class
 interval_day_second java.lang
 long java.lang
 long invoke java.time
 duration
 ofmillis(value convert value java.time
 duration object
 obtain duration object driver invoke resultset.getobject(col java.time.duration.class
 driver report datetime interval type
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#obtaining-the-names-of-elements-inside-a-struct-register</field><field name="content">
 obtain element inside struct register jdbc driver denodo transform compound value class jdbc api convert value type register java.sql
 struct object
 convert value type array java.sql
 array object
 java.sql
 array object array struct object
 standard jdbc api provide method obtain value inside java.sql
 struct object i.e. inside register field
 offer way obtain subfield struct obtain value subfield
 section explain denodo jdbc driver obtain subfield struct object
 obtain value subfield instead position inside register
 example let application execute query return register field subfield last_name first_name
 row result set return struct object
 obtain value struct object application invoke method struct.getattribute return array value
 later modify register add subfield e.g. telephone array return method struct.getattribute element instead
 addition element array telephone application obtain invalid datum
 avoid sort maintainability issue want use class denodo jdbc api obtain value struct position register
 application robust change
 example
 obtain value inside struct object import com.denodo.vdb.jdbcdriver.printer
 field import com.denodo.vdb.jdbcdriver
 vdbjdbcresultsetmetadata import com.denodo.vdb.vdbinterface.common.clientresult.vo.descriptions.type
 registervo import com.denodo.vdb.vdbinterface.common.clientresult.vo.descriptions.type
 registervaluevo public static void main(string args throw exception
 
 method getconnection return connection virtual dataport connection connection = getconnection statement st = connection.createstatement string query = select view_with_compound_field resultset rs = st.executequery(query
 
 class vdbjdbcresultsetmetadata field denodo jdbc api
 belong standard jdbc api
 vdbjdbcresultsetmetadata metadata = vdbjdbcresultsetmetadata rs.getmetadata field field = metadata.getfield rs.next int columncount = metadata.getcolumncount int = 1  = columncount i++ object value = rs.getobject(i value = null metadata.getcolumntype(i
 = = type
 struct
 
 
 jdbc api represent value type register struct object
 
 
 
 class registervo registervaluevo denodo jdbc api
 belong standard java api
 registervo vdptype = registervo fields[i 1].getvdptype
 list  registervaluevo  registersubtype = vdptype.getelement struct struct = struct value object structvalue = struct.getattribute string firstname = null lastname = null int j=0 j  registersubtypes.size j++
 variable registersubtype contain subfield
 string subfieldname = registersubtypes.get(j).getname switch subfieldname case first_name firstname = string structvalues[j break case last_name lastname = string structvalues[j break
 metadata.getcolumntype(i)==types.array
 
 jdbc api represent value type array array object
 object register = object rs.getarray(i).getarray object o register
 denodo jdbc api "content" array array struct object
 
 struct s = struct o
 
 close resultset statement connection
 
 obtain name element inside struct register
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#id4</field><field name="content">
 obtain value inside struct object import com.denodo.vdb.jdbcdriver.printer
 field import com.denodo.vdb.jdbcdriver
 vdbjdbcresultsetmetadata import com.denodo.vdb.vdbinterface.common.clientresult.vo.descriptions.type
 registervo import com.denodo.vdb.vdbinterface.common.clientresult.vo.descriptions.type
 registervaluevo public static void main(string args throw exception
 
 method getconnection return connection virtual dataport connection connection = getconnection statement st = connection.createstatement string query = select view_with_compound_field resultset rs = st.executequery(query
 
 class vdbjdbcresultsetmetadata field denodo jdbc api
 belong standard jdbc api
 vdbjdbcresultsetmetadata metadata = vdbjdbcresultsetmetadata rs.getmetadata field field = metadata.getfield rs.next int columncount = metadata.getcolumncount int = 1  = columncount i++ object value = rs.getobject(i value = null metadata.getcolumntype(i
 = = type
 struct
 
 
 jdbc api represent value type register struct object
 
 
 
 class registervo registervaluevo denodo jdbc api
 belong standard java api
 registervo vdptype = registervo fields[i 1].getvdptype
 list  registervaluevo  registersubtype = vdptype.getelement struct struct = struct value object structvalue = struct.getattribute string firstname = null lastname = null int j=0 j  registersubtypes.size j++
 variable registersubtype contain subfield
 string subfieldname = registersubtypes.get(j).getname switch subfieldname case first_name firstname = string structvalues[j break case last_name lastname = string structvalues[j break
 metadata.getcolumntype(i)==types.array
 
 jdbc api represent value type array array object
 object register = object rs.getarray(i).getarray object o register
 denodo jdbc api "content" array array struct object
 
 struct s = struct o
 
 close resultset statement connection
 
 id4
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#connecting-from-applications-that-filter-incoming-serialization-data</field><field name="content">
 connect application filter incoming serialization datum denodo jdbc driver use java remote method invocation rmi connect virtual dataport
 client application e.g. late version oracle weblogic server include mechanism filter datum receive rmi
 mechanism increase security client application
 default configuration filter application prevent application receive datum denodo
 connect denodo application filter enable administrator application add follow parameter control filter com.denodo
 configuration filter depend client application
 find information official specification jep 290
 filter incoming serialization datum
 connect application filter incoming serialization datum
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#queries-with-datetime-literals</field><field name="content">
 query datetime literal escape processing enable jdbc statement denodo jdbc driver interpret jdbc escape syntax timestamp date time literal equivalent correct vql syntax timestamp
 follow syntax timestamp literal ts yyyy mm dd hh mm ss.f follow syntax date literal d yyyy mm dd follow syntax time literal t hh mm ss example query select my_view
 time_field
 = t 20:00:03 date_field = d 1999 01 09 timestamp_field = ts 1999 01 09 20:11:11.123455 process jdbc driver send virtual dataport select my_view
 time_field = time 20:00:03 date_field = date 1999 01 09 timestamp_field = timestamp 1999 01 09 20:11:11.123455
 query datetime literal
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#get-auto-generated-keys-in-idu-statements</field><field name="content">
 auto generate key idu statement jdbc driver support retrieve value underlie database generate insert row
 auto generate value primary key new row
 example retrieve auto generate key denodo jdbc driver statement stmt = conn.createstatement
 statement.return_generated_key code request virtual dataport return auto generate value
 int row = stmt.executeupdate(\insert customer + first_name last_name
 + value john smith statement.return_generated_keys resultset rs = stmt.getgeneratedkey boolean b = rs.next b = = true retrieve new key value long customerid = rs.getlong(1 obtain auto generate key execute idu statement i.e. insert update  delete method boolean execute string sql int autogeneratedkey second argument statement.return_generated_keys boolean execute string sql int columnindexe
 boolean execute string sql string columnname int executeupdate string sql int autogeneratedkey second argument statement.return_generated_keys int executeupdate string sql int columnindexe int executeupdate string sql string columnname long executelargebatch string sql int autogeneratedkey second argument statement.return_generated_key long executelargebatch string sql int columnindexe long executelargebatch string sql string columnname
 use class java.sql
 statement java.sql
 preparedstatement
 virtual dataport store datum support feature depend underlie database support database vendor implement functionality
 example let application connect virtual dataport jdbc driver application execute code like
 datum view customer store oracle oracle return auto generate value virtual dataport driver pass application
 database test behavior check database use return value
 work internally application request return generate key driver modify idu query send virtual dataport application request obtain generate key statement.return_generated_key driver append idu statement return generate key application request auto generate value specific field driver append like idu statement return field_name_2 field_name_4 field_name_5 application request auto generate value specific field index driver append like idu statement return 3 7 11
 auto generate key idu statement
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/details_of_the_jdbc_interface/details_of_the_jdbc_interface#id5</field><field name="content">
 retrieve auto generate key denodo jdbc driver statement stmt = conn.createstatement
 statement.return_generated_key code request virtual dataport return auto generate value
 int row = stmt.executeupdate(\insert customer + first_name last_name
 + value john smith statement.return_generated_keys resultset rs = stmt.getgeneratedkey boolean b = rs.next b = = true retrieve new key value long customerid = rs.getlong(1
 id5
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/enabling_jdbc_logging/enabling_jdbc_logging#enabling-jdbc-logging</field><field name="content">
 enable jdbc log denodo jdbc driver generate log information help troubleshoot issue connect virtual dataport jdbc driver
 store log message file add follow property jdbc connection url
 loggerlevel level log message
 allow value severe log severe error warn info fine finer fine log event loggerfile optional path file store log message
 loggerconsole optional set true print log message console loggernativecall optional true driver log information relate communication driver virtual dataport
 example jdbc connection url sample enable log jdbc denodo://acme:9999 admin?loggerlevel = fine loggerfile = c:/vdpjdbc.log
 enable jdbc logging
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_jdbc/enabling_jdbc_logging/enabling_jdbc_logging#id1</field><field name="content">
 jdbc connection url sample enable log jdbc denodo://acme:9999 admin?loggerlevel = fine loggerfile = c:/vdpjdbc.log
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/access_through_odbc#access-through-odbc</field><field name="content">
 access odbc microsoft open database connectivity odbc standard define c programming language interface possible application access datum database management system dbmss
 denodo provide odbc driver window linux provide source code build driver platform
 driver base odbc postgresql driver version 09.05
 odbc driver connect virtual dataport application support jdbc excel
 note recommend connect virtual dataport jdbc driver odbc performance
 backward compatibility odbc driver virtual dataport backward compatible odbc driver client major version
 denodo odbc driver update connect virtual dataport server update new update
 example connect virtual dataport version 8.0u20210209 use odbc driver include update driver include 8.0 ga use odbc driver include 8.0u20210209 connect virtual dataport server version 8.0 ga driver recent server
 unsupported configuration operation fail
 denodo odbc driver version 7.0 able connect denodo 8.0
 compatibility guarantee unsupported configuration
 note install odbc driver 7.0 8.0 computer
 access odbc
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/access_through_odbc#backward-compatibility-of-the-odbc-driver</field><field name="content">
 backward compatibility odbc driver virtual dataport backward compatible odbc driver client major version
 denodo odbc driver update connect virtual dataport server update new update
 example connect virtual dataport version 8.0u20210209 use odbc driver include update driver include 8.0 ga use odbc driver include 8.0u20210209 connect virtual dataport server version 8.0 ga driver recent server
 unsupported configuration operation fail
 denodo odbc driver version 7.0 able connect denodo 8.0
 compatibility guarantee unsupported configuration
 note install odbc driver 7.0 8.0 computer
 backward compatibility odbc driver
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#configuration-of-the-odbc-driver-on-windows</field><field name="content">
 configuration odbc driver window denodo platform provide odbc driver window base odbc postgresql driver
 connect denodo odbc application follow step machine client application run install odbc driver register new datum source window dsn
 install odbc driver window install odbc driver machine client application run
 follow step obtain file denodo-vdp-odbcdriver-windows.zip
 copy installation  denodo_home /tool client driver odbc denodo vdp odbcdriver windows.zip
 download odbc page denodo community
 page download driver window end -win
 sure select version package new denodo server connect
 example denodo server update 7.0 20181011 download package denodo vdp odbcdriver-7.0 update-20190312 win new
 extract "content" file copy host client application run
 contain file denodoodbc_x64.msi folder msi install odbc driver 64 bit client
 denodoodbc_x86.msi folder msi install odbc driver 32 bit client
 install host application use odbc driver regardless bitness
 32 bit driver 32 bit client like microsoft excel
 microsoft excel use 32 bit odbc driver run 64 bit o.s connect virtual dataport server run 64 bit jre
 set dsn window instal denodo odbc driver host client application run need register new datum source know dsn point denodo server
 follow step open odbc datum source applet window administrative tool control panel
 open press window key enter set odbc datum source
 important dialog register odbc dsn 32 bit application 64 bit application
 example connect denodo microsoft excel use set odbc datum source 32 bit
 tab user dsn click add
 create dsn user account run application connect denodo
 possible create system dsn
 local administrator computer register system dsn
 administrator create dsn create user dsn
 difference system dsn  user dsn  user dsn current user system dsn user system
 select denodoodbc unicode driver denodoodbc ansi click finish
 configuration dialog fill follow information database database virtual dataport
 e.g. admin
 database contain non ascii character url encode
 example database \u30c6\u30b9\u30c8 enter e3%83%86%e3%82%b9%e3%83%88
 server port host port server run virtual dataport
 default odbc port 9996
 user password credential virtual dataport user
 note tool ask dsn ask user password instead define dsn
 able connect password contain follow character +
 need escape character 25 + 2b 7b 7d kerbero authentication select denodo database connect driver ignore credential
 instead obtain kerberos ticket system cache use kerbero authentication
 case possible connect normal user password authentication
 hand select kerberos authentication database level long require use kerbero odbc connection enable kerbero authentication client configuration page 3 datum source configuration dsn
 note able use kerbero authentication configuration dsn meet condition client belong window domain
 reason odbc driver request kerbero ticket ticket cache
 server field enter fully qualified domain denodo server
 denodo server kerberos configuration field server principal http/denodo-prod.subnet1.contoso.com@contoso.com enter denodo-prod.subnet1.contoso.com
 ssl enable virtual dataport server ssl mode list select require
 denodo odbc driver configuration dialog click datasource open advanced option dialog
 default option screenshot correct consider follow want log request receive dsn select commlog c:\\denodoodbc_xxx.log mylog c:\\mylog_xxx.log
 important production environment strongly recommend clear check box log request impact performance driver log file grow large size
   unknown size select maximum
 mean section maximum length text value
   use declare fetch select dsn use declare cursor fetch handle select statement
 effect dsn retrieve row result set block instead retrieve
 chunk size establish number row block
   chunk size dsn equivalent fetch size jdbc connection
 denodo odbc driver advanced configuration page 1 click page 2 default option screenshot correct
 addition area level rollback error select transaction
 denodo odbc driver advanced configuration page 2 connect set box change property odbc connection establish virtual dataport enter follow set querytimeout  value  change query time value millisecond
 set i18n  i18n  change i18n connection
 example set default timeout query hour add follow set querytimeout 3600000 set i18n us_pst note statement
 follow table describe property list default value parameter odbc driver default value connection property description default value querytimeout maximum time millisecond driver wait query finish
 period throw exception
 0 driver wait indefinitely query finish
 parameter set default timeout query
 addition change timeout single query add parameter querytimeout =  value  context clause query
 section context clause advance vql guide
 900000 millisecond 15 minute i18n set internationalization i18n configuration connection server
 present driver assume i18n database connect
   date field query result convert time zone assign i18n connection
 parameter i18n context clause query override value parameter
  i18n database connect 
 click page 3 follow set option use libpq library
 yes
 user agent box enter application use dsn
 recommend set field dsns virtual dataport useful log
 select use kerbero enable kerbero authentication
 usually default value krbsrvname correct
 enable kerbero authentication value match service class service principal server
 example field server principal kerbero set server http/denodo1.contoso.com@contoso.com value krbsrvname http
 denodo odbc driver advanced configuration page 3 establish connection oauth authentication instead user password select enable oauth 2.0 authentication provide follow value parameter
 oauth authentication parameter mean token endpoint url expose oauth server request access_token
 instance https://login.microsoftonline.com/common/oauth2/token
 client d application client d.
 usually obtain register client application identity provider
 client secret application client secret
 scope space delimit list request scope permission
 extra parameter additional parameter add body http request driver send obtain oauth token
 syntax value parameter param1 = value1 param2 = value2 use id_token select driver use id_token authentication
 clear use access_token
 select check box environment openid connect
 check certificate select recommend value driver validate ssl certificate identity provider
 clear validate certificate
 oauth connect virtual dataport enable oauth virtual dataport
 connection oauth fail
 client application open connection driver request oauth token identity provider use token establish connection
 click ok close advanced option dialog
 click test test connection virtual dataport
 click ok
 dsn configure ready
 set dsn recommend read section integration party application
 error creation dsn try log account administrative privilege
 install multiple version odbc driver window currently denodoodbc .msi
 installer allow multiple version denodoodbc odbc driver window machine
 denodoodbc odbc driver window include set script locate denodo vdp odbcdriver windows.zip\\scripts\\ multiple version time
 follow readme aforementione path instruction
 configuration odbc driver window
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#install-the-odbc-driver-on-windows</field><field name="content">
 install odbc driver window install odbc driver machine client application run
 follow step obtain file denodo-vdp-odbcdriver-windows.zip
 copy installation  denodo_home /tool client driver odbc denodo vdp odbcdriver windows.zip
 download odbc page denodo community
 page download driver window end -win
 sure select version package new denodo server connect
 example denodo server update 7.0 20181011 download package denodo vdp odbcdriver-7.0 update-20190312 win new
 extract "content" file copy host client application run
 contain file denodoodbc_x64.msi folder msi install odbc driver 64 bit client
 denodoodbc_x86.msi folder msi install odbc driver 32 bit client
 install host application use odbc driver regardless bitness
 32 bit driver 32 bit client like microsoft excel
 microsoft excel use 32 bit odbc driver run 64 bit o.s connect virtual dataport server run 64 bit jre
 install odbc driver window
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#set-up-a-dsn-on-windows</field><field name="content">
 set dsn window instal denodo odbc driver host client application run need register new datum source know dsn point denodo server
 follow step open odbc datum source applet window administrative tool control panel
 open press window key enter set odbc datum source
 important dialog register odbc dsn 32 bit application 64 bit application
 example connect denodo microsoft excel use set odbc datum source 32 bit
 tab user dsn click add
 create dsn user account run application connect denodo
 possible create system dsn
 local administrator computer register system dsn
 administrator create dsn create user dsn
 difference system dsn  user dsn  user dsn current user system dsn user system
 select denodoodbc unicode driver denodoodbc ansi click finish
 configuration dialog fill follow information database database virtual dataport
 e.g. admin
 database contain non ascii character url encode
 example database \u30c6\u30b9\u30c8 enter e3%83%86%e3%82%b9%e3%83%88
 server port host port server run virtual dataport
 default odbc port 9996
 user password credential virtual dataport user
 note tool ask dsn ask user password instead define dsn
 able connect password contain follow character +
 need escape character 25 + 2b 7b 7d kerbero authentication select denodo database connect driver ignore credential
 instead obtain kerberos ticket system cache use kerbero authentication
 case possible connect normal user password authentication
 hand select kerberos authentication database level long require use kerbero odbc connection enable kerbero authentication client configuration page 3 datum source configuration dsn
 note able use kerbero authentication configuration dsn meet condition client belong window domain
 reason odbc driver request kerbero ticket ticket cache
 server field enter fully qualified domain denodo server
 denodo server kerberos configuration field server principal http/denodo-prod.subnet1.contoso.com@contoso.com enter denodo-prod.subnet1.contoso.com
 ssl enable virtual dataport server ssl mode list select require
 denodo odbc driver configuration dialog click datasource open advanced option dialog
 default option screenshot correct consider follow want log request receive dsn select commlog c:\\denodoodbc_xxx.log mylog c:\\mylog_xxx.log
 important production environment strongly recommend clear check box log request impact performance driver log file grow large size
   unknown size select maximum
 mean section maximum length text value
   use declare fetch select dsn use declare cursor fetch handle select statement
 effect dsn retrieve row result set block instead retrieve
 chunk size establish number row block
   chunk size dsn equivalent fetch size jdbc connection
 denodo odbc driver advanced configuration page 1 click page 2 default option screenshot correct
 addition area level rollback error select transaction
 denodo odbc driver advanced configuration page 2 connect set box change property odbc connection establish virtual dataport enter follow set querytimeout  value  change query time value millisecond
 set i18n  i18n  change i18n connection
 example set default timeout query hour add follow set querytimeout 3600000 set i18n us_pst note statement
 follow table describe property list default value parameter odbc driver default value connection property description default value querytimeout maximum time millisecond driver wait query finish
 period throw exception
 0 driver wait indefinitely query finish
 parameter set default timeout query
 addition change timeout single query add parameter querytimeout =  value  context clause query
 section context clause advance vql guide
 900000 millisecond 15 minute i18n set internationalization i18n configuration connection server
 present driver assume i18n database connect
   date field query result convert time zone assign i18n connection
 parameter i18n context clause query override value parameter
  i18n database connect 
 click page 3 follow set option use libpq library
 yes
 user agent box enter application use dsn
 recommend set field dsns virtual dataport useful log
 select use kerbero enable kerbero authentication
 usually default value krbsrvname correct
 enable kerbero authentication value match service class service principal server
 example field server principal kerbero set server http/denodo1.contoso.com@contoso.com value krbsrvname http
 denodo odbc driver advanced configuration page 3 establish connection oauth authentication instead user password select enable oauth 2.0 authentication provide follow value parameter
 oauth authentication parameter mean token endpoint url expose oauth server request access_token
 instance https://login.microsoftonline.com/common/oauth2/token
 client d application client d.
 usually obtain register client application identity provider
 client secret application client secret
 scope space delimit list request scope permission
 extra parameter additional parameter add body http request driver send obtain oauth token
 syntax value parameter param1 = value1 param2 = value2 use id_token select driver use id_token authentication
 clear use access_token
 select check box environment openid connect
 check certificate select recommend value driver validate ssl certificate identity provider
 clear validate certificate
 oauth connect virtual dataport enable oauth virtual dataport
 connection oauth fail
 client application open connection driver request oauth token identity provider use token establish connection
 click ok close advanced option dialog
 click test test connection virtual dataport
 click ok
 dsn configure ready
 set dsn recommend read section integration party application
 error creation dsn try log account administrative privilege
 set dsn window
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#denodo-odbc-driver-configuration-dialog</field><field name="content">
 denodo odbc driver configuration dialog
 denodo odbc driver configuration dialog
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#denodo-odbc-driver-advanced-configuration-page-1</field><field name="content">
 denodo odbc driver advanced configuration page 1
 denodo odbc driver advanced configuration page 1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#denodo-odbc-driver-advanced-configuration-page-2</field><field name="content">
 denodo odbc driver advanced configuration page 2
 denodo odbc driver advanced configuration page 2
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#parameters-of-the-odbc-driver-and-their-default-value</field><field name="content">
  
 parameter odbc driver default value
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#denodo-odbc-driver-advanced-configuration-page-3</field><field name="content">
 denodo odbc driver advanced configuration page 3
 denodo odbc driver advanced configuration page 3
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#id1</field><field name="content">
  
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_on_windows/configuration_of_the_odbc_driver_on_windows#install-multiple-versions-of-the-odbc-driver-on-windows</field><field name="content">
 install multiple version odbc driver window currently denodoodbc .msi
 installer allow multiple version denodoodbc odbc driver window machine
 denodoodbc odbc driver window include set script locate denodo vdp odbcdriver windows.zip\\scripts\\ multiple version time
 follow readme aforementione path instruction
 install multiple version odbc driver window
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_in_linux_and_other_unix/configuration_of_the_odbc_driver_in_linux_and_other_unix#configuration-of-the-odbc-driver-in-linux-and-other-unix</field><field name="content">
 configuration odbc driver linux unix denodo platform provide odbc driver linux base odbc postgresql driver
 version driver manager unixodbc iodbc
 install denodo odbc driver machine client application run
 follow step obtain appropriate odbc driver install unixodbc register odbc driver unixodbc register datum source dsn point denodo obtain appropriate odbc driver flavor denodo odbc driver
 section explain select obtain package denodo-vdp-odbcdriver-linux.zip
 copy installation  denodo_home /tool client driver odbc denodo vdp odbcdriver linux.zip
 download odbc page denodo community
 page download driver linux end -linux
 sure select version package new denodo server connect
 example denodo server update 7.0 20181011 download package denodo vdp odbcdriver-7.0 update-20190312 linux new
 section access odbc explain policy backward compatibility driver
 extract "content" file denodo-vdp-odbcdriver-linux.tar.gz tar -xzf denodo-vdp-odbcdriver-linux.tar.gz --directory /opt
 create folder /opt denodo vdp odbcdriver linux choose appropriate flavor driver copy file host client application run
 option unixodbc_x86 odbc driver 32 bit client unixodbc driver manager
 unixodbc_x64 odbc driver 64 bit client unixodbc driver manager
 iodbc_x86 odbc driver 32 bit client iodbc driver manager
 iodbc_x64 odbc driver 64 bit client iodbc driver manager
 example connect 32 bit application unixodbc driver manager copy folder unixodbc_x86 host client application run
 denodo provide ansi version driver
 file end  e.g. unixodbc_x86 denodoodbca.so
 use ansi version unicode encode valid environment
 load denodo odbc driver follow share library version compatible list version need accesible libc.so.6
 glibc_2.14 glibc_2.3.4 glibc_2.4 glibc_2.2.5 libpthread.so.0 glibc_2.2.5 libdl.so.2 glibc_2.2.5 libgssapi_krb5.so.2 gssapi_krb5_2_mit install unixodbc linux provide odbc driver manager default install
 section explain install configure unixodbc
 denodo provide odbc driver compile iodbc
 important install unixodbc denodo odbc driver host client application run
 verify unixodbc instal execute follow command
 check command line utility odbcinst isql instal isql odbcinst command return path file section
 unixodbc instal linux distribution use rpm packaging system e.g. red hat centos etc execute sudo yum install unixodbc base debian like ubuntu execute sudo apt install unixodbc execute verify unixodbc instal correctly odbcinst -j register denodo odbc driver unixodbc instal unixodbc register odbc driver
 follow step create file denodoodbcdriver.template "content" 1 2 3 4 denodoodbcdriver description = odbc driver denodo driver=/opt denodo odbc driver unixodbc_x86 denodoodbc.so usagecount=1 modify line 3 point flavor odbc driver want use i.e. unixodbc_x86 unixodbc_x64
 execute follow command register denodo driver odbc driver manager sudo odbcinst -install -driver -file denodoodbcdriver.template list odbc driver register driver manager execute sudo odbcinst -query -driver result list new driver denodoodbcdriver
 uninstall driver execute sudo odbcinst -uninstall -driver -name denodoodbcdriver register datum source dsn unixodbc section explain register dsn unixodbc
 create file denododsn.template "content" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 denodo_dsn description = denodo connection driver =
 denodoodbcdriver servername =  host  default port odbc interface virtual dataport port = 9996 username =  virtual dataport user 
 password =  password 
 database =  virtual dataport database  useragent
 =  application use dsn  protocol = 7.4 boolsaschar = 0 byteaaslongvarbinary= 1 connsette = set querytimeout 3600000 set i18n us_pst /*krbsrvname = http*/ debug = 0 commlog = 0 fakeoidindex = 0
 fetch = 1000 ksqo = 0 lfconversion = 1 optimizer = 0 readonly = 0 rowversione = 0 showoidcolumn = 0 showsystemtable = 0 uncomment sslmode ssl enable virtual dataport
 sslmode = require uniqueindex = 1 updatablecursor = 0
 usedeclarefetch = 1 useserversideprepare= 0
 usekerberos = 0
 line 7 password tool ask dsn ask user password instead define dsn
 able connect password contain follow character +
 need escape character 25 + 2b 7b 7d line 8 database database contain non ascii character url encode
 example database \u30c6\u30b9\u30c8 set property e3%83%86%e3%82%b9%e3%83%88
 line 30 usedeclarefetch value 1 dsn use declare cursor fetch handle select statement
 effect dsn retrieve row result set block instead retrieve
 fetch property establish number row block
 property equivalent fetch size jdbc connection
 line 14 15 debug commlog value 1 driver log detailed odbc information file create /tmp directory
 production environment strongly recommend set value property 0 log request impact performance driver log file grow large size
 line 13 connsette set property connection establish virtual dataport add follow statement set querytimeout  value  change query time value millisecond
 set i18n  i18n  change i18n connection
 example set default timeout query hour set value property connsette follow connsette = set querytimeout 3600000 set i18n us_pst note statement
 read parameter odbc driver default value learn property work default value
 enable ssl virtual dataport server secure communication add follow property configuration file sslmode = require add follow connsette property connect virtual dataport kerbero authentication /*krbsrvname = http*/ important line thing connsette property
 kerbero authentication enable denodo database connect driver ignore value property username  password
 instead obtain kerberos ticket system cache
 long require enable kerbero authentication database level odbc connection late denodo odbc driver set property usekerbero 1 enable kerbero authentication client
 able use kerbero authentication configuration dsn meet condition client belong window domain
 reason odbc driver use ticket cache operating system obtain ticket grant ticket tgt
 property servername enter fully qualified domain denodo server
 kerbero configuration denodo server field server principal http/denodo-prod.subnet1.contoso.com@contoso.com enter denodo-prod.subnet1.contoso.com
 property useragent optional recommend add dsns
 user agent allow identify application open connection request application send
 useful debug problem cause particular client log purpose
 establish connection oauth authentication instead user password add follow parameter template parameter oauth authentication property mean useoauth2 set 1
 instruct driver open connection oauth authentication
 tokenendpoint url expose oauth server request access_token
 instance https://login.microsoftonline.com/common/oauth2/token
 clientid application client d.
 usually obtain register client application identity provider clientsecret application client secret
 scope space delimit list request scope permission
 extraparam additional parameter add body http request driver send obtain oauth token
 syntax value parameter param1 = value1 param2 = value2 useidtoken
 1 driver use id_token authentication
 0 use access_token
 set 1 environment openid connect
 oauthsslverify 1 driver validate ssl certificate identity provider
 0 validate certificate
 default value 1
 oauth connect virtual dataport enable oauth virtual dataport
 connection oauth fail
 client application open connection driver request oauth token identity provider use token establish connection
 execute register new dsn sudo odbcinst -install
 -s -l -f
 denododsn.template parameter -l register dsn system dsn
   system dsns available user
 privilege register system dsn replace -l -h register dsn user dsn instead
 execute command user execute client application need access dsn
 reason user dsns available user register
 list dsns register odbc driver manager execute sudo odbcinst -query
 -s result list new dsn denodo_dsn execute test dsn command line utility isql include unixodbc isql -v
 denodo_dsn like
 + ---------------------------------------+ | connect
 |
 | | |
 sql statement | | help
 tablename |
 | quit | |
 | + ---------------------------------------+ execute query example select 1 type quit exit shell
 set dsn recommend read section integration party application
 compile unixodbc install unixodbc package manager operating system download compile
 follow step download late version source code http://www.unixodbc.org/download.html execute follow command extract source code compile tar -zxf unixodbc*.tar.gz cd unixodbc ./configure.sh
 execute follow command sudo install troubleshooting issue 
 application return error like try use dsn unixodbc][driver manager]data source find default driver specify 0 sqldriverconnect follow step connect host create dsn
 check file exist /usr local lib64 libodbc.so /usr local lib64 libodbcinst.so
 /usr local lib libodbc.so /usr local lib libodbcinst.so location change depend linux unix distribution
 edit file ~/.bash_profile add follow end export ld_preload=/usr local lib libodbc.so:/usr local lib libodbcinst.so:$ld_preload change value variable ld_preload sure application load file libodbc.so libodbcinst.so provide unixodbc provide library
 note file list lib64 lib change line accordingly
 logout login user account
 apply change file .bash_profile
 configuration odbc driver linux unix
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_in_linux_and_other_unix/configuration_of_the_odbc_driver_in_linux_and_other_unix#obtain-the-appropriate-odbc-driver</field><field name="content">
 obtain appropriate odbc driver flavor denodo odbc driver
 section explain select obtain package denodo-vdp-odbcdriver-linux.zip
 copy installation  denodo_home /tool client driver odbc denodo vdp odbcdriver linux.zip
 download odbc page denodo community
 page download driver linux end -linux
 sure select version package new denodo server connect
 example denodo server update 7.0 20181011 download package denodo vdp odbcdriver-7.0 update-20190312 linux new
 section access odbc explain policy backward compatibility driver
 extract "content" file denodo-vdp-odbcdriver-linux.tar.gz tar -xzf denodo-vdp-odbcdriver-linux.tar.gz --directory /opt
 create folder /opt denodo vdp odbcdriver linux choose appropriate flavor driver copy file host client application run
 option unixodbc_x86 odbc driver 32 bit client unixodbc driver manager
 unixodbc_x64 odbc driver 64 bit client unixodbc driver manager
 iodbc_x86 odbc driver 32 bit client iodbc driver manager
 iodbc_x64 odbc driver 64 bit client iodbc driver manager
 example connect 32 bit application unixodbc driver manager copy folder unixodbc_x86 host client application run
 denodo provide ansi version driver
 file end  e.g. unixodbc_x86 denodoodbca.so
 use ansi version unicode encode valid environment
 load denodo odbc driver follow share library version compatible list version need accesible libc.so.6
 glibc_2.14 glibc_2.3.4 glibc_2.4 glibc_2.2.5 libpthread.so.0 glibc_2.2.5 libdl.so.2 glibc_2.2.5 libgssapi_krb5.so.2 gssapi_krb5_2_mit
 obtain appropriate odbc driver
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_in_linux_and_other_unix/configuration_of_the_odbc_driver_in_linux_and_other_unix#install-unixodbc</field><field name="content">
 install unixodbc linux provide odbc driver manager default install
 section explain install configure unixodbc
 denodo provide odbc driver compile iodbc
 important install unixodbc denodo odbc driver host client application run
 verify unixodbc instal execute follow command
 check command line utility odbcinst isql instal isql odbcinst command return path file section
 unixodbc instal linux distribution use rpm packaging system e.g. red hat centos etc execute sudo yum install unixodbc base debian like ubuntu execute sudo apt install unixodbc execute verify unixodbc instal correctly odbcinst -j
 install unixodbc
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_in_linux_and_other_unix/configuration_of_the_odbc_driver_in_linux_and_other_unix#register-the-denodo-odbc-driver-in-unixodbc</field><field name="content">
 register denodo odbc driver unixodbc instal unixodbc register odbc driver
 follow step create file denodoodbcdriver.template "content" 1 2 3 4 denodoodbcdriver description = odbc driver denodo driver=/opt denodo odbc driver unixodbc_x86 denodoodbc.so usagecount=1 modify line 3 point flavor odbc driver want use i.e. unixodbc_x86 unixodbc_x64
 execute follow command register denodo driver odbc driver manager sudo odbcinst -install -driver -file denodoodbcdriver.template list odbc driver register driver manager execute sudo odbcinst -query -driver result list new driver denodoodbcdriver
 uninstall driver execute sudo odbcinst -uninstall -driver -name denodoodbcdriver
 register denodo odbc driver unixodbc
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_in_linux_and_other_unix/configuration_of_the_odbc_driver_in_linux_and_other_unix#register-a-data-source-dsn-on-unixodbc</field><field name="content">
 register datum source dsn unixodbc section explain register dsn unixodbc
 create file denododsn.template "content" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 denodo_dsn description = denodo connection driver =
 denodoodbcdriver servername =  host  default port odbc interface virtual dataport port = 9996 username =  virtual dataport user 
 password =  password 
 database =  virtual dataport database  useragent
 =  application use dsn  protocol = 7.4 boolsaschar = 0 byteaaslongvarbinary= 1 connsette = set querytimeout 3600000 set i18n us_pst /*krbsrvname = http*/ debug = 0 commlog = 0 fakeoidindex = 0
 fetch = 1000 ksqo = 0 lfconversion = 1 optimizer = 0 readonly = 0 rowversione = 0 showoidcolumn = 0 showsystemtable = 0 uncomment sslmode ssl enable virtual dataport
 sslmode = require uniqueindex = 1 updatablecursor = 0
 usedeclarefetch = 1 useserversideprepare= 0
 usekerberos = 0
 line 7 password tool ask dsn ask user password instead define dsn
 able connect password contain follow character +
 need escape character 25 + 2b 7b 7d line 8 database database contain non ascii character url encode
 example database \u30c6\u30b9\u30c8 set property e3%83%86%e3%82%b9%e3%83%88
 line 30 usedeclarefetch value 1 dsn use declare cursor fetch handle select statement
 effect dsn retrieve row result set block instead retrieve
 fetch property establish number row block
 property equivalent fetch size jdbc connection
 line 14 15 debug commlog value 1 driver log detailed odbc information file create /tmp directory
 production environment strongly recommend set value property 0 log request impact performance driver log file grow large size
 line 13 connsette set property connection establish virtual dataport add follow statement set querytimeout  value  change query time value millisecond
 set i18n  i18n  change i18n connection
 example set default timeout query hour set value property connsette follow connsette = set querytimeout 3600000 set i18n us_pst note statement
 read parameter odbc driver default value learn property work default value
 enable ssl virtual dataport server secure communication add follow property configuration file sslmode = require add follow connsette property connect virtual dataport kerbero authentication /*krbsrvname = http*/ important line thing connsette property
 kerbero authentication enable denodo database connect driver ignore value property username  password
 instead obtain kerberos ticket system cache
 long require enable kerbero authentication database level odbc connection late denodo odbc driver set property usekerbero 1 enable kerbero authentication client
 able use kerbero authentication configuration dsn meet condition client belong window domain
 reason odbc driver use ticket cache operating system obtain ticket grant ticket tgt
 property servername enter fully qualified domain denodo server
 kerbero configuration denodo server field server principal http/denodo-prod.subnet1.contoso.com@contoso.com enter denodo-prod.subnet1.contoso.com
 property useragent optional recommend add dsns
 user agent allow identify application open connection request application send
 useful debug problem cause particular client log purpose
 establish connection oauth authentication instead user password add follow parameter template parameter oauth authentication property mean useoauth2 set 1
 instruct driver open connection oauth authentication
 tokenendpoint url expose oauth server request access_token
 instance https://login.microsoftonline.com/common/oauth2/token
 clientid application client d.
 usually obtain register client application identity provider clientsecret application client secret
 scope space delimit list request scope permission
 extraparam additional parameter add body http request driver send obtain oauth token
 syntax value parameter param1 = value1 param2 = value2 useidtoken
 1 driver use id_token authentication
 0 use access_token
 set 1 environment openid connect
 oauthsslverify 1 driver validate ssl certificate identity provider
 0 validate certificate
 default value 1
 oauth connect virtual dataport enable oauth virtual dataport
 connection oauth fail
 client application open connection driver request oauth token identity provider use token establish connection
 execute register new dsn sudo odbcinst -install
 -s -l -f
 denododsn.template parameter -l register dsn system dsn
   system dsns available user
 privilege register system dsn replace -l -h register dsn user dsn instead
 execute command user execute client application need access dsn
 reason user dsns available user register
 list dsns register odbc driver manager execute sudo odbcinst -query
 -s result list new dsn denodo_dsn execute test dsn command line utility isql include unixodbc isql -v
 denodo_dsn like
 + ---------------------------------------+ | connect
 |
 | | |
 sql statement | | help
 tablename |
 | quit | |
 | + ---------------------------------------+ execute query example select 1 type quit exit shell
 set dsn recommend read section integration party application
 register data source dsn unixodbc
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_in_linux_and_other_unix/configuration_of_the_odbc_driver_in_linux_and_other_unix#id1</field><field name="content">
  
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_in_linux_and_other_unix/configuration_of_the_odbc_driver_in_linux_and_other_unix#compiling-unixodbc</field><field name="content">
 compile unixodbc install unixodbc package manager operating system download compile
 follow step download late version source code http://www.unixodbc.org/download.html execute follow command extract source code compile tar -zxf unixodbc*.tar.gz cd unixodbc ./configure.sh
 execute follow command sudo install
 compile unixodbc
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/configuration_of_the_odbc_driver_in_linux_and_other_unix/configuration_of_the_odbc_driver_in_linux_and_other_unix#troubleshooting-issues</field><field name="content">
 troubleshooting issue application return error like try use dsn unixodbc][driver manager]data source find default driver specify 0 sqldriverconnect follow step connect host create dsn
 check file exist /usr local lib64 libodbc.so /usr local lib64 libodbcinst.so
 /usr local lib libodbc.so /usr local lib libodbcinst.so location change depend linux unix distribution
 edit file ~/.bash_profile add follow end export ld_preload=/usr local lib libodbc.so:/usr local lib libodbcinst.so:$ld_preload change value variable ld_preload sure application load file libodbc.so libodbcinst.so provide unixodbc provide library
 note file list lib64 lib change line accordingly
 logout login user account
 apply change file .bash_profile
 troubleshooting issue
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/creating_a_dsn_less_connection/creating_a_dsn_less_connection#creating-a-dsn-less-connection</field><field name="content">
 create dsn connection odbc tool support connect odbc server datum source dsn
 know dsn connection
 section list parameter use create dsn connection virtual dataport
 dsn connection 64 bit client driver={denodoodbc unicode(x64)};uid= user account ;pwd= password user ;server= host name ;database= database name ;port=9996;sslmode = prefer;service=;krbsrvname = http;useragent= user agent ;readonly=0;protocol=7.4 1;fakeoidindex=0;showoidcolumn=0;rowversioning=0;showsystemtables=0;connsettings = set+i18n+to+us%5fpst%3b;fetch=100;socket=4096;unknownsizes=0;maxvarcharsize=255;maxlongvarcharsize=8190;debug=0;commlog=0;optimizer=0;ksqo=0;usedeclarefetch=1;textaslongvarchar=1;unknownsaslongvarchar=0;boolsaschar=0;parse=0;cancelasfreestmt=0;extrasystableprefixe = dd_;lfconversion=1;updatablecursors=0;disallowpremature=0;trueisminus1=0;bi=0;byteaaslongvarbinary=0;useserversideprepare=0;lowercaseidentifier=0;preferlibpq=1;gssauthusegss=0;xaopt=3;usekerberos=0 dsn connection 32 bit client driver={denodoodbc unicode};uid= user account ;pwd= password user ;server= host name ;database= database name ;port=9996;pwd=;sslmode = prefer;service=;krbsrvname = http;useragent= user agent ;readonly=0;protocol=7.4 1;fakeoidindex=0;showoidcolumn=0;rowversioning=0;showsystemtables=0;connsettings = set+i18n+to+us%5fpst%3b;fetch=100;socket=4096;unknownsizes=0;maxvarcharsize=255;maxlongvarcharsize=8190;debug=0;commlog=0;optimizer=0;ksqo=0;usedeclarefetch=1;textaslongvarchar=1;unknownsaslongvarchar=0;boolsaschar=0;parse=0;cancelasfreestmt=0;extrasystableprefixe = dd_;lfconversion=1;updatablecursors=0;disallowpremature=0;trueisminus1=0;bi=0;byteaaslongvarbinary=0;useserversideprepare=0;lowercaseidentifier=0;preferlibpq=1;gssauthusegss=0;xaopt=3;usekerberos=0 example use example replace  user account password user host database user agent 
 change default odbc port replace 9996 actual odbc port virtual dataport
 note value property driver denodoodbc unicode denodoodbc unicode(x64 depend create connection 32 bit client 64 bit respectively
 dsn connection able connect password contain follow character +
 need escape character 25 + 2b 7b 7d note leave space parameter equal symbol value semicolon etc
 use kerbero authentication connect virtual dataport kerbero authentication check administrator denodo kerbero configure virtual dataport
 connection oauth protocol fail
 use kerbero authentication dsn connection use previous general template follow consideration remove parameter uid pwd
 set parameter usekerbero
 1
 value property server fully qualified domain denodo server
 kerbero configuration denodo server field server principal http/denodo-prod.subnet1.contoso.com@contoso.com enter denodo-prod.subnet1.contoso.com
 usually default value krbsrvname correct
 value match service class service principal server
 example field server principal kerbero set server http/denodo1.contoso.com@contoso.com value krbsrvname http
 use oauth authentication connect virtual dataport oauth authentication check administrator denodo oauth enable virtual dataport
 connection oauth protocol fail
 denodo odbc driver provide path connect denodo oauth
 depend choose add certain parameter connection string path 1 oauth 2.0 authentication provide access token client application obtain oauth access token pass driver
 driver use token connect virtual dataport instead user password
 path mean client application ability obtain access token connect virtual dataport
 client application obtain access token behalf end user application
 use method add parameter dns connection stre useoauth2=1 enable oauth 2.0 authentication accesstoken value access token obtain client application
 remove parameter uid pwd
 path 2 oauth 2.0 resource owner password credential client application ability obtain oauth token driver obtain behalf application identity provider organization support resource owner password credential oauth flow
 case configure connection information identity provider
 url request token identity provider client d client secret application register identity provider etc
 use method provide value parameter uid pwd
 provide credential identity provider obtain access token
 add follow parameter connection string parameter oauth authentication property mean useoauth2 set 1
 instruct driver open connection oauth authentication
 tokenendpoint url expose oauth server request access_token
 instance https://login.microsoftonline.com/common/oauth2/token
 clientid application client d.
 usually obtain register client application identity provider clientsecret application client secret
 scope space delimit list request scope permission
 extraparam additional parameter add body http request driver send obtain oauth token
 syntax value parameter param1 = value1 param2 = value2 useidtoken
 1 driver use id_token authentication
 0 use access_token
 set 1 environment openid connect
 oauthsslverify 1 driver validate ssl certificate identity provider
 0 validate certificate
 default value 1
 create dsn connection
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/creating_a_dsn_less_connection/creating_a_dsn_less_connection#dsn-less-connection-from-a-64-bit-client</field><field name="content">
 dsn connection 64 bit client driver={denodoodbc unicode(x64)};uid= user account ;pwd= password user ;server= host name ;database= database name ;port=9996;sslmode = prefer;service=;krbsrvname = http;useragent= user agent ;readonly=0;protocol=7.4 1;fakeoidindex=0;showoidcolumn=0;rowversioning=0;showsystemtables=0;connsettings = set+i18n+to+us%5fpst%3b;fetch=100;socket=4096;unknownsizes=0;maxvarcharsize=255;maxlongvarcharsize=8190;debug=0;commlog=0;optimizer=0;ksqo=0;usedeclarefetch=1;textaslongvarchar=1;unknownsaslongvarchar=0;boolsaschar=0;parse=0;cancelasfreestmt=0;extrasystableprefixe = dd_;lfconversion=1;updatablecursors=0;disallowpremature=0;trueisminus1=0;bi=0;byteaaslongvarbinary=0;useserversideprepare=0;lowercaseidentifier=0;preferlibpq=1;gssauthusegss=0;xaopt=3;usekerberos=0
 dsn connection 64 bit client
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/creating_a_dsn_less_connection/creating_a_dsn_less_connection#dsn-less-connection-from-a-32-bit-client</field><field name="content">
 dsn connection 32 bit client driver={denodoodbc unicode};uid= user account ;pwd= password user ;server= host name ;database= database name ;port=9996;pwd=;sslmode = prefer;service=;krbsrvname = http;useragent= user agent ;readonly=0;protocol=7.4 1;fakeoidindex=0;showoidcolumn=0;rowversioning=0;showsystemtables=0;connsettings = set+i18n+to+us%5fpst%3b;fetch=100;socket=4096;unknownsizes=0;maxvarcharsize=255;maxlongvarcharsize=8190;debug=0;commlog=0;optimizer=0;ksqo=0;usedeclarefetch=1;textaslongvarchar=1;unknownsaslongvarchar=0;boolsaschar=0;parse=0;cancelasfreestmt=0;extrasystableprefixe = dd_;lfconversion=1;updatablecursors=0;disallowpremature=0;trueisminus1=0;bi=0;byteaaslongvarbinary=0;useserversideprepare=0;lowercaseidentifier=0;preferlibpq=1;gssauthusegss=0;xaopt=3;usekerberos=0
 dsn connection 32 bit client
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/creating_a_dsn_less_connection/creating_a_dsn_less_connection#use-kerberos-authentication</field><field name="content">
 use kerbero authentication connect virtual dataport kerbero authentication check administrator denodo kerbero configure virtual dataport
 connection oauth protocol fail
 use kerbero authentication dsn connection use previous general template follow consideration remove parameter uid pwd
 set parameter usekerbero
 1
 value property server fully qualified domain denodo server
 kerbero configuration denodo server field server principal http/denodo-prod.subnet1.contoso.com@contoso.com enter denodo-prod.subnet1.contoso.com
 usually default value krbsrvname correct
 value match service class service principal server
 example field server principal kerbero set server http/denodo1.contoso.com@contoso.com value krbsrvname http
 use kerbero authentication
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/creating_a_dsn_less_connection/creating_a_dsn_less_connection#use-oauth-authentication</field><field name="content">
 use oauth authentication connect virtual dataport oauth authentication check administrator denodo oauth enable virtual dataport
 connection oauth protocol fail
 denodo odbc driver provide path connect denodo oauth
 depend choose add certain parameter connection string path 1 oauth 2.0 authentication provide access token client application obtain oauth access token pass driver
 driver use token connect virtual dataport instead user password
 path mean client application ability obtain access token connect virtual dataport
 client application obtain access token behalf end user application
 use method add parameter dns connection stre useoauth2=1 enable oauth 2.0 authentication accesstoken value access token obtain client application
 remove parameter uid pwd
 path 2 oauth 2.0 resource owner password credential client application ability obtain oauth token driver obtain behalf application identity provider organization support resource owner password credential oauth flow
 case configure connection information identity provider
 url request token identity provider client d client secret application register identity provider etc
 use method provide value parameter uid pwd
 provide credential identity provider obtain access token
 add follow parameter connection string parameter oauth authentication property mean useoauth2 set 1
 instruct driver open connection oauth authentication
 tokenendpoint url expose oauth server request access_token
 instance https://login.microsoftonline.com/common/oauth2/token
 clientid application client d.
 usually obtain register client application identity provider clientsecret application client secret
 scope space delimit list request scope permission
 extraparam additional parameter add body http request driver send obtain oauth token
 syntax value parameter param1 = value1 param2 = value2 useidtoken
 1 driver use id_token authentication
 0 use access_token
 set 1 environment openid connect
 oauthsslverify 1 driver validate ssl certificate identity provider
 0 validate certificate
 default value 1
 use oauth authentication
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/creating_a_dsn_less_connection/creating_a_dsn_less_connection#id1</field><field name="content">
  
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/details_of_the_odbc_interface/details_of_the_odbc_interface#details-of-the-odbc-interface</field><field name="content">
 detail odbc interface section describe information specific odbc interface denodo
 odbc interface report datetime interval datum type odbc interface report datetime interval datum type 
 odbc interface denodo follow protocol postgresql
 table list datum type denodo map datum type postgresql
 type denodo type postgresql type code postgresql localdate date 1082 time time 1083 timestamp timestamp 1114 date deprecate timestamptz 1184 timestamptz timestamptz 1184 interval_year_month interval 1186 interval_day_second interval 1186 type date timestamptz report type timestamp timezone client application distinguish
 facilitate upgrade denodo 6.0 previous version
 client application need distinguish type treat timestamptz
 detail odbc interface
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/details_of_the_odbc_interface/details_of_the_odbc_interface#how-the-odbc-interface-reports-the-datetime-and-interval-data-types</field><field name="content">
 odbc interface report datetime interval datum type odbc interface denodo follow protocol postgresql
 table list datum type denodo map datum type postgresql
 type denodo type postgresql type code postgresql localdate date 1082 time time 1083 timestamp timestamp 1114 date deprecate timestamptz 1184 timestamptz timestamptz 1184 interval_year_month interval 1186 interval_day_second interval 1186 type date timestamptz report type timestamp timezone client application distinguish
 facilitate upgrade denodo 6.0 previous version
 client application need distinguish type treat timestamptz
 odbc interface report datetime interval datum type
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/integration_with_third-party_applications/integration_with_third-party_applications#integration-with-third-party-applications</field><field name="content">
 integration party application follow subsection describe certain issue run connect odbc interface denodo party application
 integration party application
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/integration_with_third-party_applications/supporting_queries_with_brackets#supporting-queries-with-brackets</field><field name="content">
 support query bracket application microsoft power pivot query send denodo surround schema view bracket i.e. instead double quote
 example send query like select
 customer_360].[customer customer_360].[customer instead send like select customer_360 customer customer_360 customer configure dsn allow bracket instead double quote surround schema view add follow connection set dsn set identifierdelimiter
 = bracket configure window open configuration dialog dsn click data source page 2
 add connect set box
 configure linux add property connsette property file register dsn delete dsn driver manager add
 section set dsn window register denodo odbc driver unixodbc explain detail configure dsn window linux respectively
 support query bracket
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/integration_with_third-party_applications/maximum_length_of_text_values#maximum-length-of-text-values</field><field name="content">
 maximum length text value application execute query odbc interface virtual dataport interface provide metadata field result set query
 field type text report thing maximum length value field
 text field type size define source type property odbc interface report value
 type size define odbc interface report maximum size value field unknown
 case configure dsn option unknown size = maximum page 1 dialog dsn configuration dsn report maximum length field value specify max varchar property dsn
 length text value field type size define long max varchar application execute query follow thing leave value
 truncate value max varchar size
 set value null
 behavior change application application
 set source type property virtual dataport view section view schema base view administration guide
 maximum length text value
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/integration_with_third-party_applications/maximum_length_of_error_messages#maximum-length-of-error-messages</field><field name="content">
 maximum length error message application fail length error message exceed certain length
 work problem virtual dataport provide option set limit length error message
 option configure odbc interface server limit length error message
 execute command vql shell administrator account set com.denodo.vdb.vdbinterface.server.odbc.errormaxlength = 200 statement set limit 200 character
 change affect odbc client
 configure individual connection connection establish denodo odbc driver add parameter errormaxlength connect set dsn
 example set errormaxlength 200 set querytimeout 3600000 connection establish ado.net provider section access ado.net datum provider add parameter errormaxlength database
 example support?errormaxlength=200 option set connection option 2 override option set server option 1
 example configure odbc interface limit length error message 150 dsn 100 limit 100
 maximum length error message
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_odbc/integration_with_third-party_applications/disabling_transactions#disabling-transactions</field><field name="content">
 disable transaction application start transaction inadvertently
 start transaction need unnecessary strain virtual dataport server
 default avoid impact performance odbc interface denodo ignore statement odbc application send start finish transaction
 begin commit rollback savepoint release configure odbc interface process statement
 follow step open virtual dataport administration tool
 log administrator user
 open vql shell execute statement set com.denodo.vdb.vdbinterface.server.odbc.ignoretransaction = false change apply immediately restart virtual dataport server necessary
 step odbc interface start process command list
 change property affect client connect odbc interface
 affect client connect virtual dataport interface jdbc client publish web service etc
 revert default behavior execute follow set com.denodo.vdb.vdbinterface.server.odbc.ignoretransaction = true
 disable transaction
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_an_ado.net_data_provider/access_through_an_ado.net_data_provider#access-through-an-ado-net-data-provider</field><field name="content">
 access ado.net data provider ado.net datum provider software component allow user develop application independent database want use
 virtual dataport compatible .net data provider postgresql version 2.0
 recommend version 2.0.12 2.2.0 2.2.3 2.2.7 download repository
 version 3.x npgsql support partially
 execute select insert update delete query inspect view virtual dataport database
 application follow create new object class npgsqlconnection pass connection string constructor
 example  denodo_home /samples vdp vdp client ado.net program.cs
 define ado.net provider global machine.config file .config file application application request connection npgsql factory set appropriate connection string
 option allow write code independent database
 sample app.config file provider definition  xml version=\1.0 encoding=\iso-8859 1
  
  configuration system.data dbproviderfactorie add name=\npgsql data provider invariant=\npgsql support=\ff description=\ado.net data provider denodo type=\npgsql
 npgsqlfactory npgsql version=2.0.12.0 culture = neutral publickeytoken=5d8b90d52f46fda7 
  /dbproviderfactories 
  /system.data 
  /configuration  sample connectionstre connect virtual dataport string connectionstre = server = acme + port=9996 + username = admin + password = admin + database = admin + commandtimeout=80000 database contain non ascii character url encode
 example database \u30c6\u30b9\u30c8 set property database e3%83%86%e3%82%b9%e3%83%88
 default query timeout connection establish commandtimeout parameter time millisecond
 connection timeout 80 second
 value i18n connection set database parameter connection string
 section parameter odbc driver default value describe property default value
 ssl tls enable virtual dataport server secure communication add follow parameter connectionstre ssl = true;sslmode = require page http://www.npgsql.org/doc/connection-string-parameters.html list parameter connectionstre
 access ado net data provider
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_an_ado.net_data_provider/access_through_an_ado.net_data_provider#figure-sample-app-config-file-with-the-provider-definition</field><field name="content">
 sample app.config file provider definition  xml version=\1.0 encoding=\iso-8859 1 
  configuration system.data dbproviderfactorie add name=\npgsql data provider invariant=\npgsql support=\ff description=\ado.net data provider denodo type=\npgsql
 npgsqlfactory npgsql version=2.0.12.0 culture = neutral publickeytoken=5d8b90d52f46fda7 
  /dbproviderfactories 
  /system.data 
  /configuration 
 figure sample app config file provider definition
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_an_ado.net_data_provider/access_through_an_ado.net_data_provider#id1</field><field name="content">
 sample connectionstring connect virtual dataport string connectionstre = server = acme + port=9996 + username = admin + password = admin + database = admin + commandtimeout=80000
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_an_ado.net_data_provider/using_kerberos_authentication/using_kerberos_authentication#using-kerberos-authentication</field><field name="content">
 kerberos authentication develop application log virtual dataport kerbero authentication follow add parameter krbsrvname = http connection string
 parameter server connection string qualified domain virtual dataport server
 field server principal kerbero set virtual dataport server prefix http/ @ domain 
 i.e. server principal http/denodo-prod.subnet1.contoso.com@contoso.com server parameter denodo-prod.subnet1.contoso.com alias dns
 example string connectionstre = server = denodo1.subnet1.contoso.com + port=9996 + database = admin + commandtimeout=80000 kerbero authentication need provide property username  password connection string
 use kerbero authentication condition meet application use version 2.2.7 version npgsql provider
 early version support kerbero authentication
 virtual dataport database application connect configure option odbc addo.net authentication type set kerbero
 host application run belong window domain
 reason adapter use ticket cache operating system obtain ticket grant ticket tgt
 kerbero authentication
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/access_through_ole_db/access_through_ole_db#access-through-ole-db</field><field name="content">
 access ole db ole db object link embe database api design microsoft allow access datum variety source uniform manner
 denodo platform include ole db adapter partner intellisoft provide
 contact information
 access ole db
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_extensions#developing-extensions</field><field name="content">
 develop extension follow section explain develop extension api denodo
 extension develop custom filter custom function store procedure custom wrapper
 develop extension debug follow instruction article debug denodo custom extension eclipse denodo knowledge base
 develop extension
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/developing_custom_functions#developing-custom-functions</field><field name="content">
 develop custom function custom function allow user extend set function available virtual dataport
 custom function implement java class include jar file add virtual dataport section import extension administration guide
 custom function way function like max min sum etc virtual dataport allow create condition aggregation custom function
 function different java class possible group single jar file
 virtual dataport installation directory  denodo_home /samples vdp customfunction example custom function
 readme file directory explain compile use example
 develop custom function import virtual dataport read article debug denodo custom extension eclipse denodo knowledge base learn debug  
 strongly recommend develop custom function java annotation section create custom function annotation
 possible develop follow certain convention section create custom function convention custom function access feature provide denodo platform
 rule custom function follow work properly function allow
 jar contain function server load jar
 custom function store jar add remove upload remove jar server
 function signature
 signature represent different method java class define custom function
 function arity n parameter signature repeat n time
 function stateless
 store datum execution
 e.g. use global variable
 custom function implement stateful work properly certain scenario
 custom function signature return compound type value register array need additional method compute structure return type
 way virtual dataport know advance output schema query
 method need output type depend input value custom function
 define custom function simple type map directly java object virtual dataport datum object
 follow table mapping work java type equivalency java virtual dataport datum
 type virtual dataport type java class blob byte boolean java.lang
 boolean date deprecate
 java.util.calendar decimal java.math
 bigdecimal double java.lang
 double float java.lang
 float int java.lang
 integer intervaldaysecond java.time
 duration intervalyearmonth java.time
 period localdate java.time
 localdate long java.lang
 long text java.lang
 string time java.time
 localtime timestamp java.time
 localdatetime timestamptz java.time
 zoneddatetime java.util.calendar
 parameter custom function primitive int long double etc valid
 instead use java.lang.integer java.lang
 long java.long
 double etc
 parameter function varargs argument
 example function1(integer parameter1 stre parametern virtual dataport function variable number argument  
 custom function rely party library follow copy "content" require jar file jar contain custom function
 copy "content" require jar jar
 copy require jar file directory  denodo_home /extension thirdparty lib
 general advise copy jar file directory sure library interact library denodo platform
 example copy library apache common directory probably cause malfunction virtual dataport server
 develop custom function
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/developing_custom_functions#equivalency-between-java-and-virtual-dataport-data-types</field><field name="content">
  
 equivalency java virtual dataport datum type
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/creating_custom_functions_with_annotations#creating-custom-functions-with-annotations</field><field name="content">
 create custom function annotation custom function create annotation java class annotation indicate virtual dataport java class contain code custom function
 method(s contain code virtual dataport run custom function invoke
 java class contain custom function signature
 example class define function function1 signature function1(int function1(int text etc develop custom function add library  denodo_home /lib contrib denodo common custom.jar classpath development environment
 follow step create java class annotate @customelement package com.denodo.common.custom.annotation follow parameter
 function type
 type function
 value customelementtype
 vdpfunction function scalar
 customelementtype
 vdpaggregatefunction aggregation function
 add method signature want function
 example develop custom function function1 signature function1(int function1(int text add method @customexecutor public integer method1(integ @customexecutor public integer method2(integ string s type method parameter basic java type i.e. string integer long float etc
 parameter primitive type
 method represent signature function annotation @customexecutor package com.denodo.common.custom.annotation
 runtime server run appropriate method depend parameter pass function
 example query invoke function function1(int server run code method
 query invoke function function1(int text server run code second method
 class number method signature
 addition method class custom function invoke code class
 optionally add parameter syntax @customexecutor annotation
 administration tool use value parameter display signature custom function user e.g. auto completion feature expression editor
 value syntax parameter preference value syntax parameter @customparam annotation
 use
 want custom function push database add parameter delegationpattern implementation @customexecutor annotation
 section develop custom function delegate database explain detail develop type function
 method @customexecutor annotation add annotation @customparam syntax parameter parameter method
 value syntax parameter user friendly parameter function signature autocomplete feature administration tool display
 annotation syntax method display arg1 args2
 value parameter ignore annotation @customexecutor method parameter syntax
 value parameter mandatory @customparam annotation ignore
 annotation develop custom policy
 develop aggregation function mark parameter represent aggregation field annotation @customgroup
 type parameter customgroupvalue
 grouptype parameter type element group
 example @customexecutor public string aggregationfunction @customgroup(name=\textfield grouptype = string.class customgroupvalue  string  textfield
 method annotate @customexecutor meet follow condition add method annotate @customexecutorreturntype return type function array register
 return type function depend type input parameter
 section custom function return type detail method
 develop custom function delegate database section explain develop custom function executable virtual dataport server delegate jdbc datum source
 mean possible instead execute java code custom function server invoke function database
 add follow parameter annotation(s @customexecutor method(s implement function implementation true mean code function return proper result
 server execute code function delegate database
 false mean code custom function valid server execute
 server return error delegate function database delegationpattern array delegationpattern annotation represent configuration database function delegate
 delegationpattern follow attribute databasename database support function
 value correspond value parameter databasename create datasource jdbc statement create jdbc datum source want delegate function databaseversion optional array version database support function
 parameter present mean function delegate version database indicate databasename
 value array correspond value parameter databaseversion create datasource jdbc statement create jdbc datum source want delegate function pattern expression delegate database
 parameter necessary function different signature database
 string sort regular expression $ 0 represent parameter pass custom function $ 1 second etc
 parameter variable number argument varargs use pattern $ 0 $ i]{1 n
 example signature function f1(integer string param value pattern like pattern=\function_in_db($0 $ 1 $ i]{2 n
 example 2 define pattern parameter variable number argument
 pattern parameter use character indicate variable number argument e.g. $ 0 $ i]{1 n
 character literal
 note develop custom function delegable database convention describe section create custom function convention
 annotation  
 example example 1 custom scalar function delegate database let develop custom function max_value return maximum number number microsoft sql server function maximum_n calculate oracle function top_n version 10 g 11 g previous version 1
 add parameter annotation @customexecutor virtual dataport delegate execution function oracle 10 g 11 g version sql server possible
 example annotate custom function delegate database @customelement(type = customelementtype
 vdpfunction = max_value public class customfunctionmaxnumber @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = maximum_n($0 $ 1 $ 2 @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = top_n($0 $ 1 $ 2 public double max @customparam(name = arg0
 double arg0 @customparam(name = arg1
 double arg1 @customparam(name = arg2 double arg2
 function delegate database e.g. use query base view teradata execution engine execute code
 @delegationpattern annotation indicate server delegate function sql server version delegate function maximum_3
 second @delegationpattern indicate server delegate function version 10 g 11 g oracle function delegate version delegate function top_3  
 example 2 custom scalar function variable number argument delegate database let want develop function variable number argument
 case define parameter varargs note type parameter
 example annotate custom function delegate database 2 @customelement(type = customelementtype
 vdpfunction = max_value public class customfunctionmaxnumber @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = maximum_n($0 $ i]{1 n @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = top_n($0 $ i]{1 n public double max @customparam(name = value double arg0
 function delegate database e.g. use query base view teradata execution engine execute code
 add type parameter function admit value
 pattern parameter define function delegate database $ 0 $ i]{1 n
 mean pass value 2 function server delegate top_n(2 oracle
 pass parameter 2 3 4 server delegate top_3(2 3 4 oracle  
 example 3 custom aggregation function delegate database custom aggregation function delegate database @customelement(type
 = customelementtype
 vdpaggregatefunction = max_aggr_value public class customaggregationfunction @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = aggregation_func_sql_server $ 0 @delegationpattern(databasename = mysql pattern = aggregation_func_mysql $ 0 @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = aggregation_func_oracle $ 0 public string customaggregationfunctionsignature1 @customgroup(name = field grouptype = string.class customgroupvalue  string  textfield
 
 function delegate database e.g. use query tobase view teradata execution engine execute code
 return null footnote 1 sql server oracle function
 sake example
 create custom function annotation
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/creating_custom_functions_with_annotations#developing-custom-functions-that-can-be-delegated-to-a-database</field><field name="content">
 develop custom function delegate database section explain develop custom function executable virtual dataport server delegate jdbc datum source
 mean possible instead execute java code custom function server invoke function database
 add follow parameter annotation(s @customexecutor method(s implement function implementation true mean code function return proper result
 server execute code function delegate database
 false mean code custom function valid server execute
 server return error delegate function database delegationpattern array delegationpattern annotation represent configuration database function delegate
 delegationpattern follow attribute databasename database support function
 value correspond value parameter databasename create datasource jdbc statement create jdbc datum source want delegate function databaseversion optional array version database support function
 parameter present mean function delegate version database indicate databasename
 value array correspond value parameter databaseversion create datasource jdbc statement create jdbc datum source want delegate function pattern expression delegate database
 parameter necessary function different signature database
 string sort regular expression $ 0 represent parameter pass custom function $ 1 second etc
 parameter variable number argument varargs use pattern $ 0 $ i]{1 n
 example signature function f1(integer string param value pattern like pattern=\function_in_db($0 $ 1 $ i]{2 n
 example 2 define pattern parameter variable number argument
 pattern parameter use character indicate variable number argument e.g. $ 0 $ i]{1 n
 character literal
 note develop custom function delegable database convention describe section create custom function convention
 annotation  
 example example 1 custom scalar function delegate database let develop custom function max_value return maximum number number microsoft sql server function maximum_n calculate oracle function top_n version 10 g 11 g previous version 1
 add parameter annotation @customexecutor virtual dataport delegate execution function oracle 10 g 11 g version sql server possible
 example annotate custom function delegate database @customelement(type = customelementtype
 vdpfunction = max_value public class customfunctionmaxnumber @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = maximum_n($0 $ 1 $ 2 @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = top_n($0 $ 1 $ 2 public double max @customparam(name = arg0
 double arg0 @customparam(name = arg1
 double arg1 @customparam(name = arg2 double arg2
 function delegate database e.g. use query base view teradata execution engine execute code
 @delegationpattern annotation indicate server delegate function sql server version delegate function maximum_3
 second @delegationpattern indicate server delegate function version 10 g 11 g oracle function delegate version delegate function top_3  
 example 2 custom scalar function variable number argument delegate database let want develop function variable number argument
 case define parameter varargs note type parameter
 example annotate custom function delegate database 2 @customelement(type = customelementtype
 vdpfunction = max_value public class customfunctionmaxnumber @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = maximum_n($0 $ i]{1 n @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = top_n($0 $ i]{1 n public double max @customparam(name = value double arg0
 function delegate database e.g. use query base view teradata execution engine execute code
 add type parameter function admit value
 pattern parameter define function delegate database $ 0 $ i]{1 n
 mean pass value 2 function server delegate top_n(2 oracle
 pass parameter 2 3 4 server delegate top_3(2 3 4 oracle  
 example 3 custom aggregation function delegate database custom aggregation function delegate database @customelement(type
 = customelementtype
 vdpaggregatefunction = max_aggr_value public class customaggregationfunction @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = aggregation_func_sql_server $ 0 @delegationpattern(databasename = mysql pattern = aggregation_func_mysql $ 0 @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = aggregation_func_oracle $ 0 public string customaggregationfunctionsignature1 @customgroup(name = field grouptype = string.class customgroupvalue  string  textfield
 
 function delegate database e.g. use query tobase view teradata execution engine execute code
 return null footnote 1 sql server oracle function
 sake example
 develop custom function delegate database
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/creating_custom_functions_with_annotations#id2</field><field name="content">
 example annotate custom function delegate database @customelement(type = customelementtype
 vdpfunction = max_value public class customfunctionmaxnumber @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = maximum_n($0 $ 1 $ 2 @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = top_n($0 $ 1 $ 2 public double max @customparam(name = arg0
 double arg0 @customparam(name = arg1
 double arg1 @customparam(name = arg2 double arg2
 function delegate database e.g. use query base view teradata execution engine execute code
 
 id2
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/creating_custom_functions_with_annotations#id3</field><field name="content">
 example annotate custom function delegate database 2 @customelement(type = customelementtype
 vdpfunction = max_value public class customfunctionmaxnumber @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = maximum_n($0 $ i]{1 n @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = top_n($0 $ i]{1 n public double max @customparam(name = value double arg0
 function delegate database e.g. use query base view teradata execution engine execute code
 
 id3
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/creating_custom_functions_with_annotations#id4</field><field name="content">
 custom aggregation function delegate database @customelement(type
 = customelementtype
 vdpaggregatefunction = max_aggr_value public class customaggregationfunction @customexecutor(implementation = true delegationpattern = @delegationpattern(databasename
 = sqlserver pattern = aggregation_func_sql_server $ 0 @delegationpattern(databasename = mysql pattern = aggregation_func_mysql $ 0 @delegationpattern(databasename = oracle databaseversion = 10 g 11 g pattern = aggregation_func_oracle $ 0 public string customaggregationfunctionsignature1 @customgroup(name = field grouptype = string.class customgroupvalue  string  textfield
 
 function delegate database e.g. use query tobase view teradata execution engine execute code
 return null
 id4
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/creating_custom_functions_using_name_conventions#creating-custom-functions-using-name-conventions</field><field name="content">
 create custom function convention recommend develop custom function annotation
 possible follow certain convention class method
 order java class recognizable custom function class match follow rule  functionname  vdpfunction condition function  functionname  vdpaggregatefunction aggregation function
 note convention case sensitive
 mean class like function1vdpfunction function1vdpfunction
 way java class concat_samplevdpfunction interpret condition function concat_sample class group_concat_samplevdpaggregatefunction aggregate function group_concat_sample
 java method implement function signature execute
 signature associate method extract method parameter
 example class concat_samplevdpfunction method execute(valuea string valueb string):stre generate function signature concat_sample(arg1 text arg2 text
 way define arity n custom function array parameter method
 i.e. class concat_samplevdpfunction method declare public string execute(stre input
 custom function define method executereturntype parameter associate execute method return type function array register
 return type function depend type input parameter
 section custom function return type detail method
 create custom function convention
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/compound_types#compound-types</field><field name="content">
 compound type custom function compound type compound value represent follow java class register com.denodo.common.custom.element
 customrecordtype represent type register field value register
 method getpropertie return collection type pair
 element collection hold type field register
 class object return method gettype interface customrecordtype
 property depend type field type field basic method return java.lang
 class long.class integer.cla string.cla etc
 type field register method return customrecordtype object
 type field array method return customarraytype object com.denodo.common.custom.element
 customrecordvalue represent value register field
 method getpropertie return collection value pair register
 element collection hold value field register
 class object return method getvalue interface customrecordvalue
 property depend type field type value basic method return basic java object java.lang.string java.lang.integer java.lang.string etc
 type field register method return customrecordvalue object
 type field array method return customarrayvalue object
 array com.denodo.common.custom.element
 customarraytype represent data type array field value array
 hold type instance customrecordtype type element array array array register com.denodo.common.custom.element
 customarrayvalue represent value array
 hold list customrecordvalue object com.denodo.common.custom.element
 customgroupvalue represent list value come non aggregation field aggregation function
 class customelementsutil provide method create array register type value
 compound type
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/custom_function_return_type#custom-function-return-type</field><field name="content">
 custom function return type custom function return type array register return type depend input value implement additional method return type function base parameter function
 function signature meet condition additional method signature
 custom function develop java annotation additional method annotate customexecutorreturntype
 develop convention method executereturntype
 additional method meet rule number parameter execute method
 parameter additional method type equivalent respective parameter execute method execute return basic java type additional method return basic java class
 example execute return string object additional method return java.lang.string.class
 execute return customrecordvalue object additional method return customrecordtype object
 execute return customarrayvalue object additional method return customarraytype object
 table equivalency java virtual dataport datum type know type return parameter virtual dataport
 parameter execute customrecordvalue type parameter additional method customrecordtype
 parameter execute customarrayvalue type parameter additional method customarraytype
 return type compound datum type type create virtual dataport exist
 return type type create random
 runtime time function invoke virtual dataport execute additional method know return type function
 follow section contain example implement additional method function use annotation function use convention
 function annotation return type
 depend input implementation function split split string match regular expression return array substre example function annotation return type depend input public class splitvdpfunction private static final string string_field = string public customarrayvalue execute(string regex string value value = = null || regex = = null return null string result = value.split(regex linkedhashmap  string object  result = new linkedhashmap  string object (1 list  customrecordvalue  arrayvalue = new arraylist  customrecordvalue (result.length string string result results.put(string_field string customrecordvalue recordvalue = customelementsutil.createcustomrecordvalue(result arrayvalues.add(recordvalue return customelementsutil.createcustomarrayvalue(arrayvalue public customarraytype executereturntype(string regex string value linkedhashmap  string object  prop = new linkedhashmap  string object  props.put(string_field string.class customrecordtype record = customelementsutil.createcustomrecordtype(prop customarraytype array = customelementsutil.createcustomarraytype(record return array aggregation function annotation follow function return value non group field group example aggregation function annotation @customelement type = customelementtype
 vdpaggregatefunction name=\first_record public class firstrecordfunction @customexecutor public customrecordvalue execute @customgroup(grouptype = customrecordvalue.class name=\record customgroupvalue  customrecordvalue  record if(record = = null return null if(records.size = = 0 return null return records.getvalue(0 @customexecutorreturntype public customrecordtype executereturntype customrecordtype recordtype return recordtype example aggregation function annotation @customelement(type = customelementtype
 vdpaggregatefunction name=\function_f1 public class firstrecordfunction @customexecutor public long execute @customgroup(grouptype = long.class name=\value customgroupvalue  long  record return @customexecutorreturntype public class executereturntype(long value return long.clas
 custom function return type
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/custom_function_return_type#function-without-annotations-with-return-type-depending-on-the-input</field><field name="content">
 function annotation return type depend input implementation function split split string match regular expression return array substre example function annotation return type depend input public class splitvdpfunction private static final string string_field = string public customarrayvalue execute(string regex string value value = = null || regex = = null return null string result = value.split(regex linkedhashmap  string object  result = new linkedhashmap  string object (1 list  customrecordvalue  arrayvalue = new arraylist  customrecordvalue (result.length string string result results.put(string_field string customrecordvalue recordvalue = customelementsutil.createcustomrecordvalue(result arrayvalues.add(recordvalue return customelementsutil.createcustomarrayvalue(arrayvalue public customarraytype executereturntype(string regex string value linkedhashmap  string object  prop = new linkedhashmap  string object  props.put(string_field string.class customrecordtype record = customelementsutil.createcustomrecordtype(prop customarraytype array = customelementsutil.createcustomarraytype(record return array
 function annotation return type depend input
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/custom_function_return_type#id1</field><field name="content">
 example function annotation return type depend input public class splitvdpfunction private static final string string_field = string public customarrayvalue execute(string regex string value
 value = = null || regex = = null return null string result = value.split(regex linkedhashmap  string object  result = new linkedhashmap  string object (1 list  customrecordvalue  arrayvalue = new arraylist  customrecordvalue (result.length string string result results.put(string_field string customrecordvalue recordvalue = customelementsutil.createcustomrecordvalue(result arrayvalues.add(recordvalue return customelementsutil.createcustomarrayvalue(arrayvalue public customarraytype executereturntype(string regex string value linkedhashmap  string object  prop = new linkedhashmap  string object  props.put(string_field string.class customrecordtype record = customelementsutil.createcustomrecordtype(prop customarraytype array = customelementsutil.createcustomarraytype(record return array
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/custom_function_return_type#aggregation-function-using-annotations</field><field name="content">
 aggregation function annotation follow function return value non group field group example aggregation function annotation @customelement type = customelementtype
 vdpaggregatefunction name=\first_record public class firstrecordfunction @customexecutor public customrecordvalue execute @customgroup(grouptype = customrecordvalue.class name=\record customgroupvalue  customrecordvalue  record if(record = = null return null if(records.size = = 0 return null return records.getvalue(0 @customexecutorreturntype public customrecordtype executereturntype customrecordtype recordtype return recordtype example aggregation function annotation @customelement(type = customelementtype
 vdpaggregatefunction name=\function_f1 public class firstrecordfunction @customexecutor public long execute @customgroup(grouptype = long.class name=\value customgroupvalue  long  record return @customexecutorreturntype public class executereturntype(long value return long.clas
 aggregation function annotation
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/custom_function_return_type#id2</field><field name="content">
 example aggregation function annotation @customelement type = customelementtype
 vdpaggregatefunction name=\first_record public class firstrecordfunction @customexecutor public customrecordvalue execute @customgroup(grouptype = customrecordvalue.class name=\record customgroupvalue  customrecordvalue  record if(record = = null return null if(records.size = = 0 return null return records.getvalue(0 @customexecutorreturntype public customrecordtype executereturntype customrecordtype recordtype return recordtype
 id2
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/custom_function_return_type#id3</field><field name="content">
 example aggregation function annotation @customelement(type = customelementtype
 vdpaggregatefunction name=\function_f1 public class firstrecordfunction @customexecutor public long execute @customgroup(grouptype = long.class name=\value customgroupvalue  long  record return @customexecutorreturntype public class executereturntype(long value return long.clas
 id3
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/getting_information_about_the_context_of_the_query#getting-information-about-the-context-of-the-query</field><field name="content">
 information context query invoke method customelementsutil.getquerycontext obtain instance class querycontext
 class provide method obtain user execute query use function
 set role grant user
 denodo database user connect execute query use function
 get information context query
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_functions/dealing_with_datetime_and_interval_types#dealing-with-datetime-and-interval-types</field><field name="content">
 deal datetime interval type section explain develop custom function input and/or output parameter datetime type
 table mapping datum type denodo java class
 type denodo java class package java.time localdate java.time
 localdate time java.time
 localtime timestamp java.time
 localdatetime timestamptz java.time
 zoneddatetime java.util.calendar
 intervalyearmonth java.time
 period intervaldaysecond java.time
 duration example build custom function input parameter type intervalyearmonth class input parameter java.time
 period
 return timestamptz function return zoneddatetime calendar
 find implementation function signature @customelement(type = customelementtype
 vdpfunction = my_custom_function public class mycustomfunction @customexecutor
 signature 1 input parameter zoneddatetime integer
 execution engine consider type input parameter timestamptz int respectively
 return zoneddatetime
 execution engine convert timestamptz
 public zoneddatetime execute(@customparam(name = input
 zoneddatetime input @customparam(name = increment integer increment input = = null || increment = = null return null return input.plushours(increment @customexecutor
 signature 2 input parameter duration long
 execution engine consider type input parameter intervaldaysecond long respectively
 return duration object
 execution engine convert intervaldaysecond
 public duration execute(@customparam(name = input duration input @customparam(name = increment
 long increment input = = null || increment = = null return null return input.plushours(increment receive locale query add parameter type java.util
 locale annotate @customlocale
 execution inject local receive locale query
 example @customexecutor public zoneddatetime execute(@customparam(name = input
 zoneddatetime input @customparam(name = increment integer increment @customlocale locale locale  
 previous version class calendar map type date deprecate
 start denodo 7.0 class calendar map timestamptz
 want map calendar date execute follow command vql shell restart server
 set com.denodo.vdb.compatibility.datetime.custom.mapcalendartodatetype = true
 deal datetime interval type
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_stored_procedures/developing_stored_procedures#developing-stored-procedures</field><field name="content">
 develop store procedure virtual dataport provide api develop custom store procedure java
 develop store procedure import virtual dataport server
 section import store procedure administration guide explain
 denodo platform provide example store procedure source code
 locate  denodo_home /samples vdp storedprocedure
 readme file path contain instruction compile install
 develop store procedure import virtual dataport read article debug denodo custom extension eclipse denodo knowledge base learn debug  
 class interface develop store procedure locate package com.denodo.vdb.engine.storedprocedure section describe briefly use main class
 javadoc documentation api detail class method
 create store procedure create new java class extend com.denodo.vdb.engine.storedprocedure
 abstractstoredprocedure note time store procedure invoke execution engine create instance class
 class attribute store state procedure execution number process row query process result set
 override follow method public string getname
 method return store procedure
 return null
 public string getdescription method return description store procedure
 return null
 public storedprocedureparameter getparameter
 method invoke time procedure invoke
 return array input output parameter store procedure
 parameter represent storedprocedureparameter object
 storedprocedureparameter object specify type direction input and/or output nullability accept null value parameter
 parameter compound type array storedprocedureparameter object specify describe field
 method return null
 input output parameter return array
 example definition parameter store procedure compound field contain method getparameter store procedure follow parameter input parameter type text output parameter array register
 register field field1 text field2 int definition parameter store procedure compound field public storedprocedureparameter getparameter return new storedprocedureparameter new storedprocedureparameter(\parameter1 type
 varchar storedprocedureparameter.direction_in new storedprocedureparameter(\compound_field type
 array storedprocedureparameter
 direction_out true new storedprocedureparameter new storedprocedureparameter(\field1 type
 varchar storedprocedureparameter.direction_out new storedprocedureparameter(\field2 type
 integer storedprocedureparameter.direction_out public void docall(object inputvalue
 execution engine invoke method procedure
 procedure return result invoke method getprocedureresultset():storedprocedureresultset superclass obtain reference list row procedure return
 invoke method addrow storedprocedureresultset row want return
 example let procedure single output parameter compound_field define definition parameter store procedure compound field
 follow code snippet build row add result set store procedure build row compound type @override protect void docall(object inputvalue throw synchronizeexception storedprocedureexception
 object row = new object[1 list  struct  compoundfield = new arraylist  struct (values.size list  string  fieldsname = arrays.aslist(\field1 field2 value generate map.entry  string integer  value values.entryset
 list structvalue = arrays.aslist(value.getkey value.getvalue struct struct = super.createstruct(fieldsname structvalue compoundfield.add(struct row[0 = createarray(compoundfield type
 struct
 getprocedureresultset().addrow(row optionally override follow method public void initialize(databaseenvironment environment
 execution engine invoke method time query execute store procedure
 method overridden perform initialization task
 class databaseenvironment provide method useful execution procedure
 execute query method executequery executeupdate
 signature method parameter object parametervalue
 method indicate parameter vql statement placeholder
 pass value array
 cancel query execute store procedure execute databaseenvironmentimpl this.environment).cancelquerie execute vql command method executevqlcommand
 signature method parameter string databasename indicate database command execute
 strongly advise execute command modify metadata production server
 obtain reference store procedure invoke lookupprocedure
 obtain reference function invoke lookupfunction
 create new transaction invoke createtransaction
 add store procedure current transaction invoke jointransaction
 write message server log invoke log
 obtain value server property invoke getdatabaseproperty
 property request current_u user current user current_database current database
 obtain reference databaseenvironment method invoke super.getenvironment
 public boolean stop execution engine invoke method query involve store procedure cancel
 class abstractstoredprocedure provide default implementation method return false
 task execute procedure cancel override method cancel
 procedure open connection system open file etc close resource method
 method return true procedure guarantee finish method invoke
 procedure finish invoke procedure return false
 procedure overwrite method execution engine try interrupt execution procedure query start
 overwrite method mandatory recommend
 public void prepare execution engine invoke method begin transaction involve procedure
 public void commit execution engine invoke method confirm current transaction
 public void rollback execution engine invoke method undo current transaction
 public boolean casesensitiveparameter input output parameter define store procedure case sensitive override method return true
 public void log(level message log message virtual dataport logging system
 message add log category class procedure
 i.e. class procedure com.acme.procedure1 message add category com.acme.procedure1
 log category enable message log  denodo_home /logs vdp vdp.log
 enable log category modify  denodo_home /conf vdp log4j.xml invoke logcontroller store procedure
 section configure log engine administration guide  
 abstractstoredprocedure provide useful method static java.sql
 struct createstruct(collection value int type
 method create struct sql type object
 invoke method create register element
 example store procedure build row compound type
 static java.sql
 array createarray(collection value int type
 method return array
 invoke method create array element
 element list type java.sql
 struct
 create invoke method createstruct
 example store procedure build row compound type
 develop store procedure
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_stored_procedures/developing_stored_procedures#definition-of-the-parameters-of-a-stored-procedure-with-compound-fields</field><field name="content">
 definition parameter store procedure compound field public storedprocedureparameter getparameter return new storedprocedureparameter new storedprocedureparameter(\parameter1 type
 varchar storedprocedureparameter.direction_in new storedprocedureparameter(\compound_field type
 array storedprocedureparameter
 direction_out true new storedprocedureparameter new storedprocedureparameter(\field1 type
 varchar storedprocedureparameter.direction_out new storedprocedureparameter(\field2 type
 integer storedprocedureparameter.direction_out
 definition parameter store procedure compound field
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_stored_procedures/developing_stored_procedures#stored-procedures-building-a-row-of-a-compound-type</field><field name="content">
 store procedure build row compound type @override protect void docall(object inputvalue throw synchronizeexception storedprocedureexception
 object row = new object[1 list  struct  compoundfield = new arraylist  struct (values.size list  string  fieldsname = arrays.aslist(\field1 field2 value generate map.entry  string integer  value values.entryset
 list structvalue = arrays.aslist(value.getkey value.getvalue struct struct = super.createstruct(fieldsname structvalue compoundfield.add(struct row[0 = createarray(compoundfield type
 struct
 getprocedureresultset().addrow(row
 store procedure build row compound type
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_stored_procedures/using_datetime_values_in_denodo_stored_procedures#using-datetime-values-in-denodo-stored-procedures</field><field name="content">
 datetime value denodo store procedure section explain develop store procedure input and/or output parameter datetime type
 develop store procedure main class procedure override method getparameter define output schema procedure
 method return array storedprocedureparameter object
 object represent input parameter output
 second parameter constructor class storedprocedureparameter parameter type
 value parameter constant class java.sql
 type
 table display mapping denodo data type constant class java.sql
 type pass constructor storedprocedureparameter
 denodo data type class java object store procedure return
 denodo data type constant class java.sql
 type java class input parameter java class output value localdate type
 date java.sql
 date java.time
 localdate java.sql
 date time type
 time java.sql
 time java.time
 localtime java.sql
 time timestamp type
 timestamp java.sql
 timestamp java.time
 localdatetime java.sql
 timestamp timestamptz type
 timestamp_with_timezone java.sql
 timestamp java.time
 offsetdatetime java.sql
 timestamp intervalyearmonth jdbctypeutil
 interval_year_month java.time
 period java.time
 period intervaldaysecond jdbctypeutil
 interval_day_second java.time
 duration java.time
 duration jdbctypeutil = com.denodo.vdb.vdbinterface.common.clientresult.vo.descriptions.type.util
 jdbctypeutil example want input parameter type time value parameter type type
 time
 runtime procedure execute execution engine invoke method docall(object inputvalue procedure
 java class object array inputvalue depend value type declare constructor storedprocedureparameter
 @override public storedprocedureparameter getparameter return new storedprocedureparameter
 input parameter type localdate new storedprocedureparameter(\date_field type
 date storedprocedureparameter.direction_in
 input parameter type timestamp new storedprocedureparameter(\timestamp_field type
 timestamp storedprocedureparameter.direction_in
 input parameter type timestamptz new storedprocedureparameter(\timestamptz_field type
 timestamp_with_timezone storedprocedureparameter.direction_in
 input parameter type time new storedprocedureparameter(\time_field type
 time storedprocedureparameter.direction_in
 input output parameter type interval_day_second new storedprocedureparameter(\intervaldaysecond_field jdbctypeutil.interval_day_second storedprocedureparameter.direction_inout
 output parameter type interval_year_month new storedprocedureparameter(\intervalyearmonth_field jdbctypeutil.interval_year_month storedprocedureparameter.direction_out list sample implementation docall
 method invoke execution engine run procedure
 example docall public void docall(object inputvalue
 date sqldate = date inputvalues[0 //types
 date localdate
 localdate = sqldate.tolocaldate timestamp sqltimestamp = timestamp inputvalues[1 //types
 timestamp localdatetime localdatetime = sqltimestamp.tolocaldatetime timestamp sqltimestamptz = timestamp inputvalues[2 //types
 timestamp_with_timezone
 offsetdatetime offsetdatetime = sqltimestamptz.toinstant().atoffset(zoneoffset.utc time sqltime = time inputvalues[3 //types
 time localtime localtime = sqltime.tolocaltime
 duration d = duration inputvalues[4 jdbctypeutil
 interval_day_second period p = period inputvalues[5 jdbctypeutil.interval_year_month
 datetime value procedure return object package java.sql java.time
 list procedure return row equivalent
 row generate object package java.sql second object package java.time
 public void docall(object inputvalue
 add row java.sql object getprocedureresultset().addrow(new object date.valueof(\2017 10 11 timestamp.valueof(\2015 03 08 01:59:59 new timestamp(sdf.parse(\2015 03 08 01:59:59 +01:00\).gettime time.valueof(\21:15:45 duration.ofhours(65).plusminutes(23 period.ofmonths(25
 add row java.time object getprocedureresultset().addrow(new object localdate.parse(\2017 10 11 localdatetime.parse(\2015 03 08t01:59:59 offsetdatetime.parse(\2015 03 08t01:59:59 + 01:00 localtime.parse(\21:15:45 duration.ofhours(65).plusminutes(23 period.ofmonths(25 compatibility store procedure previous version previous version constant class java.sql
 type map different datum type denodo type
 date start version 7.0 map localdate previous version map date deprecate type
 timestamp start version 7.0 map timestamp previous version map date deprecate type
 time start version 7.0 map time previous version map long develop store procedure rely object declare procedure token use_denodo_6_0_type_mapping
 example create procedure testnewtypesprocedure2 classname='com.denodo.vdb.test
 testnewtypesprocedure classpath= use_denodo_6_0_type_mapping = true
 datetime value denodo store procedure
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_stored_procedures/using_datetime_values_in_denodo_stored_procedures#id1</field><field name="content">
 example docall public void docall(object inputvalue
 date sqldate = date inputvalues[0 //types
 date localdate
 localdate = sqldate.tolocaldate timestamp sqltimestamp = timestamp inputvalues[1 //types
 timestamp localdatetime localdatetime = sqltimestamp.tolocaldatetime timestamp sqltimestamptz = timestamp inputvalues[2 //types
 timestamp_with_timezone
 offsetdatetime offsetdatetime = sqltimestamptz.toinstant().atoffset(zoneoffset.utc time sqltime = time inputvalues[3 //types
 time localtime localtime = sqltime.tolocaltime
 duration d = duration inputvalues[4 jdbctypeutil
 interval_day_second period p = period inputvalues[5 jdbctypeutil.interval_year_month
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_stored_procedures/using_datetime_values_in_denodo_stored_procedures#compatibility-with-stored-procedures-of-previous-versions</field><field name="content">
 compatibility store procedure previous version previous version constant class java.sql
 type map different datum type denodo type
 date start version 7.0 map localdate previous version map date deprecate type
 timestamp start version 7.0 map timestamp previous version map date deprecate type
 time start version 7.0 map time previous version map long develop store procedure rely object declare procedure token use_denodo_6_0_type_mapping
 example create procedure testnewtypesprocedure2 classname='com.denodo.vdb.test
 testnewtypesprocedure classpath= use_denodo_6_0_type_mapping = true
 compatibility store procedure previous version
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_stored_procedures/required_libraries_to_develop_stored_procedures#required-libraries-to-develop-stored-procedures</field><field name="content">
 require library develop store procedure develop store procedure add follow jar file classpath environment  denodo_home /lib vdp server core denodo vdp server.jar  denodo_home /lib vdp client core denodo vdp parser.jar want add library apache commons lang library  denodo_home /lib contrib commons lang.jar apache common io  denodo_home /lib contrib commons io.jar classpath project
 contain helper utility ease development procedure
 deploy procedure need import include "content" present classpath virtual dataport server
 store procedure rely party library follow step import party jar file virtual dataport create new store procedure administration tool select jar procedure external jar
 copy "content" require jar jar contain store procedure
 copy "content" require jar jar
 require library develop store procedure
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/developing_custom_wrappers#developing-custom-wrappers</field><field name="content">
 develop custom wrapper virtual dataport provide api develop custom wrapper
 api create connector query datum source support virtual dataport
 create new custom wrapper custom datum source extend java abstract class abstractcustomwrapper com.denodo.vdb.engine.customwrapper
 abstract class provide default implementation interface customwrapper com.denodo.vdb.engine.customwrapper
 implement interface customwrapper
 follow section explain extend abstractcustomwrapper class
 virtual dataport include sample custom wrapper retrieve datum salesforce account
 example  denodo_home /samples vdp customwrapper
 readme file directory explain compile install use custom wrapper
 develop custom wrapper import virtual dataport read article debug denodo custom extension eclipse denodo knowledge base learn debug
 develop custom wrapper
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/required_libraries_to_develop_custom_wrappers#required-libraries-to-develop-custom-wrappers</field><field name="content">
 require library develop custom wrapper develop custom wrapper virtual dataport add follow jar file classpath environment  denodo_home /lib vdp server core denodo vdp server.jar  denodo_home /lib vdp client core denodo vdp parser.jar want add library apache commons lang library  denodo_home /lib contrib commons lang.jar apache common io  denodo_home /lib contrib commons io.jar classpath project
 contain helper utility ease development procedure
 deploy wrapper need import include "content" present classpath virtual dataport server
 custom wrapper rely party library follow step import party jar file virtual dataport create new custom datum source administration tool select jar custom wrapper external jar
 copy "content" require jar jar contain custom wrapper
 copy "content" require jar jar
 require library develop custom wrapper
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/extending_abstractcustomwrapper#extending-abstractcustomwrapper</field><field name="content">
 extend abstractcustomwrapper simple way create new custom wrapper implement follow method abstract class com.denodo.vdb.engine.customwrapper
 abstractcustomwrapper public customwrapperschemaparameter
 getschemaparameters(map  string string  inputvalue
 method return output schema custom wrapper schema datum obtain query wrapper
 develop custom wrapper output schema depend value input parameter
 implement method getinputparameter section override abstractcustomwrapper define input parameter wrapper
 parameter inputvalue contain value parameter
 output schema represent array customwrapperschemaparameter object represent field schema
 customwrapperschemaparameter type property mandatoriness nullability etc optional array customwrapperschemaparameter case represent field compound
 customwrapperschemaparameter specify source type property field return wrapper
 section source type property administration guide explain define property beneficial performance query
 public void run customwrapperconditionholder condition list  customwrapperfieldexpression  projectedfield customwrapperresult result map  string string  inputvalue virtual dataport invoke method user query wrapper
 depend wrapper configuration section configure custom wrapper condition projectedfield argument account condition explain section deal condition
 parameter encapsulate condition list project field query wrapper
 inputvalue contain input parameter wrapper
 contain textual representation value contain information type
 method getinputparametervalue(string return instance customwrapperinputparametervalue provide information parameter value type
 usually implementation method run involve analyze pass condition project field input value query wrapper datum source return retrieve datum virtual dataport
 invoke method addrow result argument receive array object
 array pass addrow contain series object match list project field specify run method
 type object match schema define method getschemaparameter javadoc method getparameterclass class customwrapperschemaparameter check appropriate java class customwrapperschemaparameter accord type
 obtain schema current execution custom wrapper invoke method getschema object customwrapperresult pass parameter method run
 schema return method getschemaparameter custom wrapper
 invoke method useful custom wrapper output i.e. method getschemaparameter return change depend input parameter wrapper
 implement method create custom wrapper
 scenario need override method abstractcustomwrapper class access advanced feature
 section list method default behavior
 useful method abstractcustomwrapper like log(int level string logmessage log information server log file getcustomwrapperplan access execution plan add information trace section update custom wrapper plan
 extend abstractcustomwrapper
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/overriding_abstractcustomwrapper#overriding-abstractcustomwrapper</field><field name="content">
 override abstractcustomwrapper follow method overridden extend abstractcustomwrapper
 public customwrapperinputparameter
 getinputparameter
 method define series input parameter accept custom wrapper represent array object customwrapperinputparameter
 default implementation method return array
 example implementation method getinputparameter example implementation method
 customwrapperinputparameter object follow property parameter
 mandatory true provide parameter query wrapper
 false parameter optional
 environment dependent true parameter consider environment dependent
 mean vql wrapper export file option export environment specific property separately value parameter property value
 false value parameter include vql file
 description description parameter
 administration tool description tooltip custom datum source wizard type type input parameter
 instantiate object class customwrapperinputparametertype invoke appropriate method customwrapperinputparametertypefactory class
 factory follow method booleantype create boolean parameter
 integertype longtype floattype doubletype create number parameter
 stringtype longstringtype create normal long text parameter enumstringtype create enumeration parameter
 input parameter type value enumeration
 administration tool display drop list user select valid value
 hiddenstringtype create text parameter contain sensitive information write virtual dataport log display administration tool
 administration tool hide value type parameter
 routetype create parameter store path file
 administration tool provide wizard build valid route type parameter
 parameter consider environment dependent regardless value flag environment dependent
 logintype passwordtype
 custom wrapper input parameter create logintype create passwordtype administration tool allow user enable pass credential create base view wrapper
 case user query base view value parameter credential user execute query
 example implementation method getinputparameter @override public customwrapperinputparameter
 getinputparameter return new customwrapperinputparameter new customwrapperinputparameter(string_param mandatory parameter type string true true customwrapperinputparametertypefactory
 stringtype new customwrapperinputparameter(boolean_param mandatory parameter type boolean false
 + default value true true customwrapperinputparametertypefactory booleantype(false new customwrapperinputparameter(integer_param optional parameter type integer false true customwrapperinputparametertypefactory
 integertype new customwrapperinputparameter(route_param optional parameter type route false true customwrapperinputparametertypefactory
 routetype(routetype.value public customwrapperconfiguration getconfiguration method define custom wrapper configuration detail configure custom wrapper section configure custom wrapper
 default implementation method return instance customwrapperconfiguration available configuration parameter set default value
 public boolean stop execution engine invoke method query involve custom wrapper cancel
 class abstractcustomwrapper provide default implementation method return false
 task execute wrapper cancel override method cancel
 wrapper open connection system open file etc close resource method
 method return true wrapper guarantee finish method invoke
 wrapper finish invoke wrapper return false
 wrapper overwrite method execution engine try interrupt execution
 overwrite method mandatory recommend
 custom wrapper provide support insert delete update operation
 implement override appropriate method custom wrapper automatically configure virtual dataport know insert delete update capability
 follow method overridden provide support idu operation public int insert(map  customwrapperfieldexpression object  insertvalue map  string string  inputvalue throw customwrapperexception method define custom wrapper insert datum associated datum source
 wrapper input parameter value pass argument necessary
 datum insert provide map customwrapperfieldexpression object
 customwrapperfieldexpression optional list sub field case field compound
 method getstringrepresentation customwrapperfieldexpression provide default text version field
 field elaborate like myfield.myarray[10].myinteger example represent compound field myfield array type sub field myarray sub field myinteger
 method return number successfully insert value
 default implementation return 0
 public int delete(customwrapperconditionholder condition map  string string  inputvalue throw customwrapperexception method define custom wrapper delete datum associated datum source
 deletion condition input parameter value pass argument section deal condition detail deal condition
 number successfully delete value return
 default implementation method return 0
 public int update(map  customwrapperfieldexpression object  updatevalue customwrapperconditionholder condition map  string string  inputvalue throw customwrapperexception method define custom wrapper update datum associated datum source
 update condition update value input parameter value provide argument section deal condition detail deal condition explanation insert method section detail update value
 number successfully update value return
 default implementation method return 0
 custom wrapper provide support distribute transaction
 implement override appropriate method custom wrapper automatically configure virtual dataport know transactional capability
 follow method overridden custom wrapper support distribute transaction public void prepare method define custom wrapper perform prepare operation context distribute transaction
 default implementation
 public void commit method define custom wrapper perform commit operation context distribute transaction
 default implementation
 public void rollback method define custom wrapper perform rollback operation context distribute transaction
 default implementation
 override abstractcustomwrapper
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/overriding_abstractcustomwrapper#example-implementation-of-the-method-getinputparameters</field><field name="content">
 example implementation method getinputparameter @override public customwrapperinputparameter getinputparameter return new customwrapperinputparameter new customwrapperinputparameter(string_param mandatory parameter type string true true customwrapperinputparametertypefactory
 stringtype new customwrapperinputparameter(boolean_param mandatory parameter type boolean false
 + default value true true customwrapperinputparametertypefactory booleantype(false new customwrapperinputparameter(integer_param optional parameter type integer false true customwrapperinputparametertypefactory
 integertype new customwrapperinputparameter(route_param optional parameter type route false true customwrapperinputparametertypefactory
 routetype(routetype.value
 example implementation method getinputparameter
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/dealing_with_conditions#dealing-with-conditions</field><field name="content">
 deal condition condition pass custom wrapper argument run delete update method section extend abstractcustomwrapper override abstractcustomwrapper come encapsulate instance customwrapperconditionholder
 object class contain version condition pass custom wrapper simplify version available getconditionmap method
 version consist association customwrapperfieldexpression object
 example condition map like field1 100 field2 foo mean condition pass custom wrapper field1 = 100 field2
 = foo
 condition available map match pattern field_1 = value
 field_n = value case getconditionmap method return null
 conversion map force getconditionmap(boolean force method pass true value force
 account case return map equivalent original condition
 customwrappercondition instance
 version available getcomplexcondition method
 customwrappercondition superclass type condition support custom wrapper customwrappersimplecondition represent simple condition
 hold leave expression customwrapperexpression object operator right expression array customwrapperexpression object
 right expression store array usually contain expression
 customwrapperandcondition represent series condition join operator
 hold list customwrappercondition object
 customwrapperorcondition represent series condition join operator
 hold list customwrappercondition object
 customwrappernotcondition represent negate condition
 hold customwrappercondition
 customwrapperexpression superclass type expression support custom wrapper customwrapperfieldexpression
 common type expression condition leave
 section override abstractcustomwrapper detail customwrappersimpleexpression
 kind expression type type define java.sql.type value customwrapperfunctionexpression
 represent function parameter
 type expression optional modifier distinct list parameter instance customwrapperfunctionparameter property aggregation function
 customwrapperfunctionparameter contain list customwrapperexpression customwrapperconditionexpression
 represent condition parameter case function
 contain customwrappercondition customwrapperarrayexpression
 contain list customwrapperexpression kind customwrapperregisterexpression
 contain list customwrapperexpression kind
 deal condition
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/dealing_with_the_order_by_clause#dealing-with-the-order-by-clause</field><field name="content">
 deal order clause 
 custom wrapper declare customwrapperconfiguration support order delegation section configure custom wrapper developer invoke method getorderbyexpression obtain expression order clause delegate custom wrapper
 method return list customwrapperorderbyexpression object follow attribute field field row sort order order asc desc sort
 deal order clause
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/configuring_a_custom_wrapper#configuring-a-custom-wrapper</field><field name="content">
 configure custom wrapper custom wrapper configure getconfiguration method
 method return instance customwrapperconfiguration class encapsulate follow configuration parameter delegateprojection true default
 define custom wrapper deal project field query
 delegateorcondition false default
 define custom wrapper deal condition f1 = 1 f1 = 2 sql delegatenotcondition false default
 define custom wrapper deal condition f1 = 1 sql delegatearrayliteral false default
 define custom wrapper deal condition contain array my_int_array = row 1 row 2
 delegateregisterliteral false default
 define custom wrapper deal condition contain register my_register = row 1
 delegateleftliteral false default
 define custom wrapper deal condition literal leave 100 = field delegaterightfield false default
 define custom wrapper deal condition field right field1 = field2 delegaterightliteral true default
 define custom wrapper deal condition literal right field1 = 100
 delegateorderby false default
 define custom wrapper deal order expression
 allowedoperator default array contain operator =)
 define operator support condition pass custom wrapper
 javadoc method setallowedoperator class customwrapperconfiguration list possible operator
 value property obtain define mean appropriate getter setter
 configure custom wrapper
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/updating_the_custom_wrapper_plan#updating-the-custom-wrapper-plan</field><field name="content">
 update custom wrapper plan method getcustomwrapperplan return customwrapperplan object represent current wrapper execution plan
 object allow add information wrapper plan display execution trace
 add information wrapper plan invoke method addplanentry(stre title string entry
 example custom wrapper query database useful add wrapper plan information query execute database
 update custom wrapper plan
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/dealing_with_datetime_and_interval_types#dealing-with-datetime-and-interval-types</field><field name="content">
 deal datetime interval type section explain develop custom wrapper return datetime value
 develop custom wrapper main class wrapper override method getschemaparameters(map  string string  inputvalue define output schema custom wrapper
 method return array customwrapperschemaparameter object
 second parameter constructor class customwrapperschemaparameter parameter type
 value parameter constant class java.sql
 type
 table display mapping denodo data type constant class java.sql
 type pass constructor customwrapperschemaparameter
 denodo data type class java object custom wrapper return
 denodo data type constant class java.sql
 type java class localdate type
 date java.time
 localdate time type
 time java.time
 localtime timestamp type
 timestamp java.time
 localdatetime timestamptz type
 timestamp_with_timezone java.time
 offsetdatetime intervaldaysecond jdbctypeutil
 interval_day_second java.time
 duration intervalyearmonth jdbctypeutil
 interval_year_month java.time
 period jdbctypeutil = com.denodo.vdb.vdbinterface.common.clientresult.vo.descriptions.type.util
 jdbctypeutil definition parameter custom wrapper datetime field 
 public customwrapperschemaparameter
 getschemaparameter map  string string  inputvalue return new customwrapperschemaparameter new customwrapperschemaparameter(\date_field types.date new customwrapperschemaparameter(\timestamp_field types.timestamp new customwrapperschemaparameter(\timestamptz_field types.timestamp_with_timezone new customwrapperschemaparameter(\time_field types.time new customwrapperschemaparameter(\intervalyear_month jdbctypeutil.interval_year_month new customwrapperschemaparameter(\intervalday_second jdbctypeutil.interval_day_second code note java object return custom wrapper appropriate accord table
 example method getschemaparameter field date_field create constant type
 date
 table type parameter correspond type localdate object result java.time
 localdate run method custom wrapper return datetime value void run(customwrapperconditionholder condition list  customwrapperfieldexpression  projectedfield customwrapperresult result map  string string  inputvalue throw customwrapperexception
 result.addrow(new object localdate.parse(\2017 10 11 localdatetime.parse(\2015 03 08t01:59:59 offsetdatetime.parse(\2015 03 08t01:59:59 + 01:00 localtime.parse(\21:15:45 duration.ofhours(65).plusminutes(23 period.ofmonths(25 projectedfield result.addrow(new object sdf.parse(\2017 10 11 sdf.parse(\2015 03 08 01:59:59 sdf.parse(\2015 03 08 01:59:59 +01:00 sdf.parse(\21:15:45 duration.ofhours(65).plusminutes(23 period.ofmonths(25 projectedfield backward compatibility custom wrapper return java.util
 date object type localdate timestamp timestamptz  time
 return type object support future major version denodo
 deal datetime interval type
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/dealing_with_datetime_and_interval_types#id1</field><field name="content">
 definition parameter custom wrapper datetime field public customwrapperschemaparameter
 getschemaparameter map  string string  inputvalue return new customwrapperschemaparameter new customwrapperschemaparameter(\date_field types.date new customwrapperschemaparameter(\timestamp_field types.timestamp new customwrapperschemaparameter(\timestamptz_field types.timestamp_with_timezone new customwrapperschemaparameter(\time_field types.time new customwrapperschemaparameter(\intervalyear_month jdbctypeutil.interval_year_month new customwrapperschemaparameter(\intervalday_second jdbctypeutil.interval_day_second
 id1
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_wrappers/dealing_with_datetime_and_interval_types#id2</field><field name="content">
 run method custom wrapper return datetime value void run(customwrapperconditionholder condition list  customwrapperfieldexpression  projectedfield customwrapperresult result map  string string  inputvalue throw customwrapperexception
 result.addrow(new object localdate.parse(\2017 10 11 localdatetime.parse(\2015 03 08t01:59:59 offsetdatetime.parse(\2015 03 08t01:59:59 + 01:00 localtime.parse(\21:15:45 duration.ofhours(65).plusminutes(23 period.ofmonths(25 projectedfield result.addrow(new object sdf.parse(\2017 10 11 sdf.parse(\2015 03 08 01:59:59 sdf.parse(\2015 03 08 01:59:59 +01:00 sdf.parse(\21:15:45 duration.ofhours(65).plusminutes(23 period.ofmonths(25 projectedfield
 id2
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_input_filters/developing_custom_input_filters#developing-custom-input-filters</field><field name="content">
 develop custom input filter create df json xml datum source select input filter preprocesse datum retrieve source execution engine process
 provide box input filter virtual dataport provide java api allow develop filter preprocess datum way need
 virtual dataport include sample custom filter read datum source replace character
 example folder  denodo_home /samples vdp customconnectionfilter
 readme file directory explain compile install use custom filter
 develop custom filter import virtual dataport read article debug denodo custom extension eclipse denodo knowledge base learn debug
 develop custom input filter
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_input_filters/required_libraries_to_develop_custom_filters#required-libraries-to-develop-custom-filters</field><field name="content">
 require library develop custom filter develop custom filter add follow jar file classpath environment  denodo_home /lib contrib denodo common connection util.jar  denodo_home /lib contrib denodo common util.jar custom filter rely party library follow step
 import party jar file virtual dataport import new custom filter administration tool select jar custom filter external jar
 copy "content" require jar jar contain store procedure
 copy "content" require jar jar
 require library develop custom filter
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/developing_extensions/developing_custom_input_filters/developing_custom_filters#developing-custom-filters</field><field name="content">
 develop custom filter develop custom filter create new class extend class customconnectionfilter com.denodo.parser.connection.filter package
 class implement method execute(inputstream is):inputstream
 custom connection filter input parameter
 useful want behavior custom filter easily customizable
 retrieve parameter enter user assign filter datum source invoke method getparameters():map  string object  execute method
 folder  denodo_home /samples vdp customconnectionfilter contain example custom filter
 develop custom filter generate jar import virtual dataport section import extension administration guide
 develop custom filter
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/custom_policies/custom_policies#custom-view-policies</field><field name="content">
 custom view policy custom view policy query interceptor invoke virtual dataport server execute query view
 similar row restriction benefit customize
 user query view custom view policy assign policy follow action reject query
 accept query restriction
 accept query impose restriction limit row return query add filter condition etc select action custom view policy access parameter query context decide proceed query user want execute user privilege jmx connection server policy use access virtual dataport datum jmx custom view policy reusable mean follow assign custom policy view user role
 use global security policy easily apply view user etc
 define configuration parameter
 policy assign user role view customize behavior parameter
 thank behavior policy customize depend user role assign
 example develop policy limit number query view user role execute time number parameter policy
 way set limit assign policy role developer limit role application
 user query view user custom view policy assign view policy evaluate follow way custom view policy apply user execute query administrator administrator database user role serveradmin
 user role custom view policy assign view server evaluate policy
 policy reject query query reject
 user role assign role role assign evaluation custom view policy perform group
 role group form custom policy assign directly role group custom view policy directly assign user
 group reject query policy group reject query
 group accept query policy group accept query
 query accept group accept query
 example let user role r1 r2
 user policy assign view v p1 p2
 role r1 user policy assign view v p3 p4
 role r2 policy assign view v p5 p6
 user query view v virtual dataport evaluate policy p1
 p1 accept query evaluate p2
 p2 accept query server evaluate policy execute query
 p1 reject query server evaluate policy user begin evaluate policy role r1 p3 p4
 p3 accept query evaluate p4
 p4 accept query server evaluate policy execute query
 p3 reject query server evaluate policy role r1 begin evaluate policy role r2 p5 p6
 p5 accept query server evaluate p6
 p6 accept query server execute query
 p5 reject query server execute query
 custom view policy
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/custom_policies/developing_a_custom_policy#developing-a-custom-view-policy</field><field name="content">
 develop custom view policy custom view policy java class annotation mark class custom view policy indicate method server execute intercept query execute
 time custom policy execute server create new instance class
 java class static attribute value execution policy
 develop custom view policy add  denodo_home /lib contrib denodo common custom.jar classpath project
 virtual dataport api javadoc provide documentation class annotation api
 sample custom view policy directory  denodo_home /samples vdp custompolicies/. custom view policy limit number concurrent query user role execute view store procedure
 custom view policy input parameter limit set maximum number concurrent query user role execute
 readme file directory explain compile example import virtual dataport
 develop custom view policy import virtual dataport read article debug denodo custom extension eclipse denodo knowledge base learn debug  
 develop custom view policy create java class like import com.denodo.common.custom.annotation
 import com.denodo.common.custom.policy
 @customelement(name = my_new_custom_policy type = customelementtype
 vdpcustompolicy
 public class mydenodocustompolicy @customcontext customrestrictionpolicycontext context @customexecutor public customrestrictionpolicyvalue execute @customparam(name = parameter1 mandatory = false string inputparameter
 
 custom view policy accept query involve view policy assign
 return new customrestrictionpolicyvalue(customrestrictionpolicytype
 accept
 attribute @customelement custom view policy
 attribute context obtain information context query query virtual dataport receive getquery
 field involve query
 list field select group clause getfieldsinquery
 user account execute query getcurrentusername
 list effective role user account execute query getcurrentuserrole
 role grant directly user grant role user user
 user agent connection execute query getcurrentuseragent
 database query execute getcurrentdatabasename
 different database view belong
 example connect database db1 execute select db2.customer method return db1
 user role custom view policy assign getpolicycredentialsname getpolicycredentialstype
 method return policy assign user role
 view store procedure custom view policy assign getelementtype getelementname
 database element custom view policy assign getelementdatabase
 collection assign tag element getelementtag
 map assign tag field element getfieldstag
 property query
 invoke getproperty obtain value property setproperty change
 available property constant define customrestrictionpolicycontext class i18n_property swap_property etc
 extra authentication information provide authentication mechanism getadditionalauthenticationinformation provide jmx connection virtual dataport server custom view policy use retrieve datum jmx getjmxconnection
 jmx interface denodo provide information current status server
 allow modify behavior policy base load denodo server number concurrent query etc log message invoke method log
 message log method redirect log category com.denodo.vdb.catalog.view
 customrestrictionpolicycontextimpl
 check log category enable isloglevelenable
 list option javadoc class customrestrictionpolicycontext note custom view policy mechanism initialize attribute context right invoke method execute attribute null try access constructor class
 add parameter custom view policy add parameter method execute annotate @customparam(name
 =  parameter_name  mandatory = false
 annotation parameter administration tool use value display information custom view policy user
 mandatory boolean value indicate parameter mandatory
 later assign policy user role view provide value input parameter policy
 java class method annotate @customexecutor example execute method
 execution engine load custom view policy execution query execute method mark annotation return customrestrictionpolicyvalue object
 accept query return return new customrestrictionpolicyvalue(customrestrictionpolicytype.accept reject query return return new customrestrictionpolicyvalue(customrestrictionpolicytype.reject add condition query return string condition = title chief executive officer return new customrestrictionpolicyvalue customrestrictionpolicytype.accept_with_filter customrestrictionpolicyfiltertype
 reject_row condition null example execution engine add condition title chief executive officer query execute user
 add condition query field list field query return follow
 field consider query clause use field select group
 string condition = title chief executive officer set  string  sensitivefield = new hashset (arrays.aslist(\salary bonus return new customrestrictionpolicyvalue(customrestrictionpolicytype
 accept_with_filter customrestrictionpolicyfiltertype
 reject_row_if_any_sensitive_fields_use condition sensitivefield example query use field salary and/or bonus condition title chief executive officer add query
 query use field condition add query
 add condition query field list field query return follow
 field consider query clause use field select group
 string condition = title chief executive officer set  string  sensitivefield = new hashset (arrays.aslist(\salary bonus return new customrestrictionpolicyvalue(customrestrictionpolicytype
 accept_with_filter customrestrictionpolicyfiltertype
 reject_row_if_all_sensitive_fields_use condition sensitivefield
 example query use field salary  bonus condition title chief executive officer add query
 query use field condition add query
 note example use constant reject_row_if_all_sensitive_fields_use previous example use reject_row_if_any_sensitive_fields_use
 mask value list field row verify certain condition field query return follow string condition = title chief executive officer set  string  sensitivefield = new hashset (arrays.aslist(\salary bonus return new customrestrictionpolicyvalue(customrestrictionpolicytype
 accept_with_filter customrestrictionpolicyfiltertype
 mask_sensitive_fields_if_any_use condition sensitivefield mask field value set null
 example query use field salary and/or bonus field list sensitivefield salary  bonus set null row verify condition
 example row field title  chief executive officer i.e. meet condition field salary  bonus null
 query use field field mask
 mask value list field row verify condition field query return follow string condition = title chief executive officer set  string  sensitivefield = new hashset (arrays.aslist(\salary bonus return new customrestrictionpolicyvalue(customrestrictionpolicytype
 accept_with_filter customrestrictionpolicyfiltertype
 mask_sensitive_fields_if_all_use condition sensitivefield mask field value set null
 example query use field salary  bonus field list sensitivefield salary  bonus set null row verify condition
 example row field title  chief executive officer i.e. meet condition field salary  bonus null
 query use field condition add query field mask
 mask value field row result query i.e. option mask_sensitive_fields_if_all_use mask_sensitive_fields_if_any_use use condition evaluate false
 example 1 null
 string condition = 1 null set  string  sensitivefield = new hashset (arrays.aslist(\salary bonus return new customrestrictionpolicyvalue(customrestrictionpolicytype
 accept_with_filter customrestrictionpolicyfiltertype
 mask_sensitive_fields_if_any_use condition sensitivefield example query use field salary and/or bonus field salary  bonus bet set null row
 mask value previous example different masking use constructor receive default masking expression map mask configuration field
 example mask salary default behavior bonus 0 value
 string condition = 1 null map  string custommaskingexpression  sensitivefield = new linkedhashmap sensitivefields.put(\salary custommaskingexpression.default sensitivefields.put(\bonus custommaskingexpression.set_0 return new customrestrictionpolicyvalue(customrestrictionpolicytype
 accept_with_filter customrestrictionpolicyfiltertype
 mask_sensitive_fields_if_any_use condition custommaskingexpression.redact sensitivefield example query use field salary and/or bonus field salary set result redact expression column type bonus bet set 0 row  
 input parameter custom view policy datetime value check section deal datetime interval type custom function
 rule manage input parameter custom view policy custom function
 develop custom view policy
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/appendix#appendix</field><field name="content">
 appendix list appendix include document output schema list command output schema desc command error code return virtual dataport compile denodo odbc driver pre requisite compile odbc driver linux compile odbc driver standard method compile odbc driver obtain forwardable ticket troubleshoot compilation denodo odbc driver
 appendix
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/output_schema_of_the_list_command/output_schema_of_the_list_command#output-schema-of-the-list-command</field><field name="content">
 output schema list command section list output list command execute jdbc odbc client
 note command execute vql shell administration tool return information debug purpose change future
 output schema list command list wrapper list datasource column command list jar return column jar_name functions_type function
 value column functions_type function null jar contain custom function
 output contain row type function jar functions_type indicate type function condition aggregate
 function function contain jar
 list function custom contain column type syntax
 command return row signature function
 type column indicate function aggregation function condition function
 list role contain column description role
 column contain list role grant role
 list database info contain column description set column database configuration datum
 output schema list command
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/output_schema_of_the_desc_commands/output_schema_of_the_desc_commands#output-schema-of-the-desc-commands</field><field name="content">
 output schema desc command way describe object jdbc client desc vql statement
 return vql statement create element
 example obtain vql view dependency
 desc vql view incident obtain vql jdbc datum source
 desc vql datasource jdbc ds_jdbc_phone_inc section describe catalog element vql guide list modifier desc vql statement
 desc statement
 return information element structured way
 table list output desc command execute jdbc odbc client
 command execute vql shell administration tool return information debug purpose change future
 output command include password security purpose
 note execute command vql shell administration tool instead jdbc client return information debug purpose change update denodo platform
 output schema desc command depend parameter statement column result desc database  database  description desc datasource custom  datum source  class classpath jar desc datasource df  datum source  begin delimiter end delimiter column delimiter end line delimiter header pattern tuple pattern data route desc datasource essbase  datum source 
 database version uri user desc datasource jdbc  datum source  database uri driver class user classpath database database version ping query initial size max active desc datasource json  datum source  data route desc datasource ldap  datum source  uri login desc datasource odbc  datum source  dsn database uri driver class user classpath database database version ping query initial size max active desc datasource olap  datum source  database database version xmla uri user max active initial size desc datasource salesforce  datum source  database base url api version desc datasource sapbwbapi  datum source  system host client
 d system number user read block size desc datasource saperp
  datum source  system host client
 d system number user desc datasource ws  datum source  wsdl route authentication type = authentication 1 = http basic authentication 2 = http digest authentication 3 = ntlm authentication 10 = wss basic authentication 11 = wss digest authentication authentication user proxy host
 proxy port proxy user desc datasource xml  datum source  data route schema route dtd route desc map simple  map  desc map i18n  map  key value row entry map desc procedure  procedure  type parameter type direction = input parameter output parameter
 desc role  role  description role role assign role
 role row assign command return row role assign role
 desc session database user i18n activetransaction true connection start transaction
 false
 desc type  type  field type type complex return row component type
 simple e.g. text type
 desc user  user  description admin true user administrator
 false
 desc view  view  fieldname fieldtype row field view
 fieldtypecode fieldprecision fielddecimal fieldradix isprimarykey isnotnull isunique isautoincrement isgeneratedcolumn field fieldtypecode fieldprecision fielddecimal fieldradix value source type property field view
 value correspond property sourcetypeid sourcetypesize sourcetypedecimal sourcetyperadix respectively create table view statement create view
 property section view schema base view administration guide section jdbc wrapper vql guide
 desc soap | rest
 webservice wsname wstype operationtype 1 = select 10 = insert 11 = update 12 = delete operationname fieldname fieldtype fielddirection input output parameter
 statement return row parameter web service
 desc wrapper custom  wrapper  type = custom datum source parameter output schema desc wrapper df  wrapper  type = df data source output schema desc wrapper essbase  wrapper  type = esbase datum source server application cube mdx sentence output schema desc wrapper itp  wrapper  type = itp creation date maintenance old sequence substitution model "content" scanner output schema desc wrapper
 
 jdbc | odbc  wrapper  type = jdbc odbc datum source relation sql sentence alias output schema desc wrapper json  wrapper  type = json data source tuple root output schema desc wrapper ldap  wrapper  type = ldap datum source object class recursive search ldap expression output schema desc wrapper olap  wrapper  type = olap datum source catalog schema cube mdx sentence output schema desc wrapper salesforce
  wrapper  type = salesforce data source database datum source object soql sentence output schema desc wrapper sapbwbapi  wrapper  type = sapbwbapi schema cube mdx sentence output schema desc wrapper saperp  wrapper  type = saperp schema bapi output schema desc wrapper ws  wrapper  type = ws data source service port operation input message output message output schema desc wrapper xml  wrapper  type = xml datum source tuple root output schema
 output schema desc command
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/output_schema_of_the_desc_commands/output_schema_of_the_desc_commands#output-schema-of-the-desc-command-depending-on-its-parameters</field><field name="content">
  
 output schema desc command depend parameter
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/error_codes_returned_by_virtual_dataport/error_codes_returned_by_virtual_dataport#error-codes-returned-by-virtual-dataport</field><field name="content">
 error code return virtual dataport follow table list error code return jdbc api virtual dataport
 error code return denodo jdbc
 api error type error code mean authentication 20 21 22 23 range 600 700 server authenticate user
 usually mean credential user valid user privilege connect database
 user try connect ldap authenticate database error establish connection ldap server
 parse 1 19 range 1100 1199 error parse query
 usually mean clause query misspell parameter miss
 connection range 10000 19999 server open connection datum source
 happen source case jdbc data source jdbc driver load error create instance custom wrapper etc
 security 11 12 range 20000 29999 user privilege execute request
 example user read privilege try execute insert query
 compute capability 2 9 range 30000 39999 error create view prepare execution plan query schema view query calculate
 e.g. query try project field exist
 restriction source query meet
 e.g. query provide value mandatory field
 metadata management 5 8 10 17 18 24 range 40000 49999 error loading store metadata object datum source wrapper view etc
 happen object new object valid etc
 execution 4 6 7 13 14 15 16 25 range 50000 59999 error execution query
 error code return virtual dataport
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/error_codes_returned_by_virtual_dataport/error_codes_returned_by_virtual_dataport#error-codes-returned-by-the-denodo-jdbc-api</field><field name="content">
  
 error code return denodo jdbc api
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/compile_denodo_odbc_driver/compile_denodo_odbc_driver#compile-the-denodo-odbc-driver</field><field name="content">
 compile denodo odbc driver denodo provide denodo odbc driver window linux compatible driver manager unixodbc iodbc
 denodo include source code driver case need use driver unix use driver manager unixodbc iodbc
 section explain compile denodo odbc driver
 pre requisite compile odbc driver linux denodo odbc driver depend follow package version gcc unixodbc version  = 2.2.14 unixodbc devel version  = 2.2.14
 linux distribution unixodbc dev
 openssl devel linux distribution libssl dev need package want odbc driver support kerbero authentication
 postgresql devel version  = 9.x linux distribution postgresql server dev-9.5
 curl version  = 7.71.1 execute curl -v verify version note need connect denodo server kerbero authentication jdbc datum source denodo use pass session credential install package postgresql devel
 manually build later
 compile odbc driver check package instal host compile driver linux distribution use rpm packaging system e.g. red hat centos etc check package list instal
 execute yum list instal  package 
 example yum list instal gcc postgresql devel unixodbc unixodbc devel openssl devel like instal package gcc.x86_64 4.8.2 16.2.el7_0 openssl devel.x86_64
 1:1.0.1e-60.el7 postgresql devel.x86_64 9.2.18 1.el7 unixodbc.x86_64 2.3.1 11.el7 unixodbc devel.x86_64 2.3.1 11.el7 check package instal version package meet requirement
 package list mean install
 install package execute command yum install  package 
 example sudo yum install openssl devel return package available mean particular distribution package differently
 case search package command yum list available  package 
 example yum list available openssl devel
 note parameter include asterisk
 pass pattern exact
 package come
 copy install yum install  package 
 linux distribution base debian packaging system like ubuntu check package list instal
 execute apt list --installe  package 
 example apt list --installe gcc postgresql server dev-9.5 unixodbc unixodbc dev libssl dev like list
 gcc trusty 4:4.8.2 1ubuntu6 amd64 instal libssl dev trusty update trusty security 1.0.1f-1ubuntu2.22 amd64 instal postgresql server dev-9.5 trusty update 9.5.14 0ubuntu0.14.04 amd64 instal unixodbc trusty 2.2.14p2 5ubuntu5 amd64 instal unixodbc dev trusty 2.2.14p2 5ubuntu5 amd64 instal check package instal version package meet requirement
 package list mean install
 note package different list talk rpm base distribution
 reason debian base distribution package different
 package instal install command apt install  package 
 example sudo apt install unixodbc return unable locate package  package  mean particular distribution package differently
 case search package command apt list  package 
 example apt list unixodbc note parameter include asterisk
 pass pattern exact
 package come
 copy install apt install  package 
 note privilege execute sudo type su press enter provide root password
 root user duration session
 compile odbc driver standard method section explain compile denodo odbc driver
 open command line execute command
 notice denodo odbc driver compile client machine
 note need connect denodo server kerbero authentication jdbc datum source denodo use pass session credential follow instruction section
 instead section compile odbc driver obtain forwardable ticket
 important line replace  denodo_odbc_home  path directory contain denodo-vdp-odbcdriver-linux.tar.gz file
 
 file obtain  denodo_home /tool client driver odbc machine denodo server instal
 export denodo_odbc_home= denodo_odbc_home  cd $ denodo_odbc_home
 build denodoodbc driver
 tar -xzf denodo-vdp-odbcdriver-linux.tar.gz cd denodo vdp odbcdriver linux src denodo pgsqlodbc ./configure --prefix=$denodo_odbc_home dist install
 driver compile
 locate  denodo_odbc_home /dist lib
 ./configure fail miss dependency section troubleshoot compilation denodo odbc driver
 example ./configure fail error configure error odbc_config find require unixodbc build
 compile odbc driver obtain forwardable ticket section explain compile denodo odbc driver obtain forwardable kerbero ticket
 necessary need use kerbero authentication jdbc datum source denodo use pass session credential
 able use driver login password authentication
 need feature follow step section
 note follow process system need patch command available
 connect client machine driver open command line execute command important line replace  denodo_odbc_home  path directory contain denodo-vdp-odbcdriver-linux.tar.gz file
 
 file obtain  denodo_home /tool client driver odbc machine denodo server instal
 export denodo_odbc_home= denodo_odbc_home  cd $ denodo_odbc_home tar -xzf denodo-vdp-odbcdriver-linux.tar.gz
 cd denodo vdp odbcdriver linux src download source code postgresql wget https://ftp.postgresql.org/pub/source/v9.5.14/postgresql-9.5.14.tar.gz tar -xzf postgresql-9.5.14.tar.gz
 file denodo-vdp-odbcdriver-linux.tar.gz include patch modify libpq library postgresql kerbero authentication work denodo
 cd postgresql-9.5.14 patch ./src interface libpq fe-
 auth.c ./libpq.patch build libpq library include postgresql ./configure
 --with krb srvnam = http --with openssl --without readline --prefix=$denodo_odbc_home dist postgresql install build denodoodbc driver
 cd $ denodo_odbc_home denodo vdp odbcdriver linux src denodo pgsqlodbc ./configure --with libpq=$denodo_odbc_home dist postgresql bin pg_config --prefix=$denodo_odbc_home dist install libpq denodoodbc driver
 cd $ denodo_odbc_home dist cp postgresql lib libpq.so.5
 lib/ driver compile
 locate  denodo_odbc_home /dist lib
 recompile library libpq locate directory
 note system able find dependent library libpq.so load denodo odbc driver need add path recompile libpq.so.5 environment variable ld_library_path libpath
 ./configure fail miss dependency section
 example ./configure fail error configure error odbc_config find require unixodbc build
 troubleshoot compilation denodo odbc driver find problem compilation denodo odbc driver try follow check package require denodo odbc driver instal include version
 correct try compile manually package unixodbc postgresql devel
 execute follow command compile libpq module postgresql devel library
 important line replace  denodo_odbc_home  path directory contain denodo-vdp-odbcdriver-linux.tar.gz file
 
 file obtain  denodo_home /tool client driver odbc machine denodo server instal
 export denodo_odbc_home= denodo_odbc_home  cd $ denodo_odbc_home
 download build libpq include postgresql
 wget https://ftp.postgresql.org/pub/source/v9.5.14/postgresql-9.5.14.tar.gz tar -xzf postgresql-9.5.14.tar.gz cd postgresql-9.5.14 ./configure
 --with krb srvnam = http --with openssl --without readline --prefix=$denodo_odbc_home dist postgresql install compile unixodbc cd $ denodo_odbc_home
 download build unixodbc
 wget http://www.unixodbc.org/unixodbc-2.3.4.tar.gz tar -xzf unixodbc-2.3.4.tar.gz cd unixodbc-2.3.4 ./configure
 install compile denodo odbc driver libpq library compile cd $ denodo_odbc_home build denodoodbc driver
 tar -xzf denodo-vdp-odbcdriver-linux.tar.gz cd $ denodo_odbc_home denodo vdp odbcdriver linux src denodo pgsqlodbc ./configure --with libpq=$denodo_odbc_home dist postgresql bin pg_config --prefix=$denodo_odbc_home dist install command fail driver  denodo_odbc_home /dist lib
 compile denodo odbc driver
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/compile_denodo_odbc_driver/compile_denodo_odbc_driver#pre-requisites-to-compile-the-odbc-driver-on-linux</field><field name="content">
 pre requisite compile odbc driver linux denodo odbc driver depend follow package version gcc unixodbc version  = 2.2.14 unixodbc devel version  = 2.2.14 linux distribution unixodbc dev
 openssl devel linux distribution libssl dev need package want odbc driver support kerbero authentication
 postgresql devel version  = 9.x linux distribution postgresql server dev-9.5
 curl version  = 7.71.1 execute curl -v verify version note need connect denodo server kerbero authentication jdbc datum source denodo use pass session credential install package postgresql devel
 manually build later
 compile odbc driver check package instal host compile driver linux distribution use rpm packaging system e.g. red hat centos etc check package list instal
 execute yum list instal  package 
 example yum list instal gcc postgresql devel unixodbc unixodbc devel openssl devel like instal package gcc.x86_64 4.8.2 16.2.el7_0 openssl devel.x86_64
 1:1.0.1e-60.el7 postgresql devel.x86_64 9.2.18 1.el7 unixodbc.x86_64 2.3.1 11.el7 unixodbc devel.x86_64 2.3.1 11.el7 check package instal version package meet requirement
 package list mean install
 install package execute command yum install  package 
 example sudo yum install openssl devel return package available mean particular distribution package differently
 case search package command yum list available  package 
 example yum list available openssl devel
 note parameter include asterisk
 pass pattern exact
 package come
 copy install yum install  package 
 linux distribution base debian packaging system like ubuntu check package list instal
 execute apt list --installe  package 
 example apt list --installe gcc postgresql server dev-9.5 unixodbc unixodbc dev libssl dev like list
 gcc trusty 4:4.8.2 1ubuntu6 amd64 instal libssl dev trusty update trusty security 1.0.1f-1ubuntu2.22 amd64 instal postgresql server dev-9.5 trusty update 9.5.14 0ubuntu0.14.04 amd64 instal unixodbc trusty 2.2.14p2 5ubuntu5 amd64 instal unixodbc dev trusty 2.2.14p2 5ubuntu5 amd64 instal check package instal version package meet requirement
 package list mean install
 note package different list talk rpm base distribution
 reason debian base distribution package different
 package instal install command apt install  package 
 example sudo apt install unixodbc return unable locate package  package  mean particular distribution package differently
 case search package command apt list  package 
 example apt list unixodbc note parameter include asterisk
 pass pattern exact
 package come
 copy install apt install  package 
 note privilege execute sudo type su press enter provide root password
 root user duration session
 pre requisite compile odbc driver linux
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/compile_denodo_odbc_driver/compile_denodo_odbc_driver#compile-the-odbc-driver-standard-method</field><field name="content">
 compile odbc driver standard method section explain compile denodo odbc driver
 open command line execute command
 notice denodo odbc driver compile client machine
 note need connect denodo server kerbero authentication jdbc datum source denodo use pass session credential follow instruction section
 instead section compile odbc driver obtain forwardable ticket
 important line replace  denodo_odbc_home  path directory contain denodo-vdp-odbcdriver-linux.tar.gz file
 
 file obtain  denodo_home /tool client driver odbc machine denodo server instal
 export denodo_odbc_home= denodo_odbc_home  cd $ denodo_odbc_home
 build denodoodbc driver
 tar -xzf denodo-vdp-odbcdriver-linux.tar.gz cd denodo vdp odbcdriver linux src denodo pgsqlodbc ./configure --prefix=$denodo_odbc_home dist install
 driver compile
 locate  denodo_odbc_home /dist lib
 ./configure fail miss dependency section troubleshoot compilation denodo odbc driver
 example ./configure fail error configure error odbc_config find require unixodbc build
 compile odbc driver standard method
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/compile_denodo_odbc_driver/compile_denodo_odbc_driver#compile-the-odbc-driver-to-obtain-forwardable-tickets</field><field name="content">
 compile odbc driver obtain forwardable ticket section explain compile denodo odbc driver obtain forwardable kerbero ticket
 necessary need use kerbero authentication jdbc datum source denodo use pass session credential
 able use driver login password authentication
 need feature follow step section
 note follow process system need patch command available
 connect client machine driver open command line execute command important line replace  denodo_odbc_home  path directory contain denodo-vdp-odbcdriver-linux.tar.gz file
 
 file obtain  denodo_home /tool client driver odbc machine denodo server instal
 export denodo_odbc_home= denodo_odbc_home  cd $ denodo_odbc_home tar -xzf denodo-vdp-odbcdriver-linux.tar.gz
 cd denodo vdp odbcdriver linux src download source code postgresql wget https://ftp.postgresql.org/pub/source/v9.5.14/postgresql-9.5.14.tar.gz tar -xzf postgresql-9.5.14.tar.gz
 file denodo-vdp-odbcdriver-linux.tar.gz include patch modify libpq library postgresql kerbero authentication work denodo
 cd postgresql-9.5.14 patch ./src interface libpq fe-
 auth.c ./libpq.patch build libpq library include postgresql ./configure
 --with krb srvnam = http --with openssl --without readline --prefix=$denodo_odbc_home dist postgresql install build denodoodbc driver
 cd $ denodo_odbc_home denodo vdp odbcdriver linux src denodo pgsqlodbc ./configure --with libpq=$denodo_odbc_home dist postgresql bin pg_config --prefix=$denodo_odbc_home dist install libpq denodoodbc driver
 cd $ denodo_odbc_home dist cp postgresql lib libpq.so.5
 lib/ driver compile
 locate  denodo_odbc_home /dist lib
 recompile library libpq locate directory
 note system able find dependent library libpq.so load denodo odbc driver need add path recompile libpq.so.5 environment variable ld_library_path libpath
 ./configure fail miss dependency section
 example ./configure fail error configure error odbc_config find require unixodbc build
 compile odbc driver obtain forwardable ticket
 </field></doc><doc><field name="topic">
 https://community.denodo.com/docs/html/browse/8.0/en/vdp/developer/appendix/compile_denodo_odbc_driver/compile_denodo_odbc_driver#troubleshooting-the-compilation-of-the-denodo-odbc-driver</field><field name="content">
 troubleshoot compilation denodo odbc driver find problem compilation denodo odbc driver try follow check package require denodo odbc driver instal include version
 correct try compile manually package unixodbc postgresql devel
 execute follow command compile libpq module postgresql devel library
 important line replace  denodo_odbc_home  path directory contain denodo-vdp-odbcdriver-linux.tar.gz file
 
 file obtain  denodo_home /tool client driver odbc machine denodo server instal
 export denodo_odbc_home= denodo_odbc_home  cd $ denodo_odbc_home
 download build libpq include postgresql
 wget https://ftp.postgresql.org/pub/source/v9.5.14/postgresql-9.5.14.tar.gz tar -xzf postgresql-9.5.14.tar.gz cd postgresql-9.5.14 ./configure
 --with krb srvnam = http --with openssl --without readline --prefix=$denodo_odbc_home dist postgresql install compile unixodbc cd $ denodo_odbc_home
 download build unixodbc
 wget http://www.unixodbc.org/unixodbc-2.3.4.tar.gz tar -xzf unixodbc-2.3.4.tar.gz cd unixodbc-2.3.4 ./configure
 install compile denodo odbc driver libpq library compile cd $ denodo_odbc_home build denodoodbc driver
 tar -xzf denodo-vdp-odbcdriver-linux.tar.gz cd $ denodo_odbc_home denodo vdp odbcdriver linux src denodo pgsqlodbc ./configure --with libpq=$denodo_odbc_home dist postgresql bin pg_config --prefix=$denodo_odbc_home dist install command fail driver  denodo_odbc_home /dist lib
 troubleshoot compilation denodo odbc driver
 </field>
 </doc>
</add>